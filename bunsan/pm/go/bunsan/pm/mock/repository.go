// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/bunsanorg/pm/go/bunsan/pm (interfaces: Repository)

package mock_pm

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) CleanCache() error {
	ret := _m.ctrl.Call(_m, "CleanCache")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) CleanCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CleanCache")
}

func (_m *MockRepository) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockRepository) Create(_param0 string, _param1 bool) error {
	ret := _m.ctrl.Call(_m, "Create", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1)
}

func (_m *MockRepository) CreateRecursively(_param0 string, _param1 bool) error {
	ret := _m.ctrl.Call(_m, "CreateRecursively", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) CreateRecursively(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRecursively", arg0, arg1)
}

func (_m *MockRepository) Extract(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Extract", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Extract(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Extract", arg0, arg1)
}

func (_m *MockRepository) ForceUpdate(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "ForceUpdate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) ForceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ForceUpdate", arg0, arg1)
}

func (_m *MockRepository) Install(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Install", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Install(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Install", arg0, arg1)
}

func (_m *MockRepository) NeedUpdate(_param0 string, _param1 string, _param2 time.Time) (bool, error) {
	ret := _m.ctrl.Call(_m, "NeedUpdate", _param0, _param1, _param2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) NeedUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NeedUpdate", arg0, arg1, arg2)
}

func (_m *MockRepository) Update(_param0 string, _param1 string, _param2 time.Time) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1, arg2)
}
