// Code generated by protoc-gen-go.
// source: bunsan/broker/worker/protocol/event.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	bunsan/broker/worker/protocol/event.proto

It has these top-level messages:
	Event
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bunsan_broker "github.com/bunsanorg/broker/go/bunsan/broker"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Event struct {
	// Types that are valid to be assigned to Kind:
	//	*Event_Status
	//	*Event_Result
	Kind isEvent_Kind `protobuf_oneof:"Kind"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}

type isEvent_Kind interface {
	isEvent_Kind()
}

type Event_Status struct {
	Status *bunsan_broker.Status `protobuf:"bytes,1,opt,name=status,oneof"`
}
type Event_Result struct {
	Result *bunsan_broker.Result `protobuf:"bytes,2,opt,name=result,oneof"`
}

func (*Event_Status) isEvent_Kind() {}
func (*Event_Result) isEvent_Kind() {}

func (m *Event) GetKind() isEvent_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Event) GetStatus() *bunsan_broker.Status {
	if x, ok := m.GetKind().(*Event_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Event) GetResult() *bunsan_broker.Result {
	if x, ok := m.GetKind().(*Event_Result); ok {
		return x.Result
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, []interface{}{
		(*Event_Status)(nil),
		(*Event_Result)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Kind
	switch x := m.Kind.(type) {
	case *Event_Status:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Event_Result:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Kind has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // Kind.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(bunsan_broker.Status)
		err := b.DecodeMessage(msg)
		m.Kind = &Event_Status{msg}
		return true, err
	case 2: // Kind.result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(bunsan_broker.Result)
		err := b.DecodeMessage(msg)
		m.Kind = &Event_Result{msg}
		return true, err
	default:
		return false, nil
	}
}
