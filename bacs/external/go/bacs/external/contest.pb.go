// Code generated by protoc-gen-go.
// source: bacs/external/contest.proto
// DO NOT EDIT!

/*
Package external is a generated protocol buffer package.

It is generated from these files:
	bacs/external/contest.proto
	bacs/external/external.proto
	bacs/external/language.proto
	bacs/external/result.proto
	bacs/external/submit.proto

It has these top-level messages:
	Contest
	ContestList
	Problem
	Language
	LanguageList
	SystemResult
	BuildResult
	TestResult
	TestGroupResult
	ResourceUsage
	SubmitResult
	SubmitResultList
	Submit
	SubmitList
*/
package external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Contest struct {
	Id      *Contest_Id              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Info    map[string]*Contest_Info `protobuf:"bytes,2,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Problem []*Problem               `protobuf:"bytes,3,rep,name=problem" json:"problem,omitempty"`
}

func (m *Contest) Reset()         { *m = Contest{} }
func (m *Contest) String() string { return proto.CompactTextString(m) }
func (*Contest) ProtoMessage()    {}

func (m *Contest) GetId() *Contest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Contest) GetInfo() map[string]*Contest_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Contest) GetProblem() []*Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

type Contest_Id struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Contest_Id) Reset()         { *m = Contest_Id{} }
func (m *Contest_Id) String() string { return proto.CompactTextString(m) }
func (*Contest_Id) ProtoMessage()    {}

type Contest_IdList struct {
	Entry []*Contest_Id `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *Contest_IdList) Reset()         { *m = Contest_IdList{} }
func (m *Contest_IdList) String() string { return proto.CompactTextString(m) }
func (*Contest_IdList) ProtoMessage()    {}

func (m *Contest_IdList) GetEntry() []*Contest_Id {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Contest_Info struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Contest_Info) Reset()         { *m = Contest_Info{} }
func (m *Contest_Info) String() string { return proto.CompactTextString(m) }
func (*Contest_Info) ProtoMessage()    {}

type ContestList struct {
	Entry []*Contest `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *ContestList) Reset()         { *m = ContestList{} }
func (m *ContestList) String() string { return proto.CompactTextString(m) }
func (*ContestList) ProtoMessage()    {}

func (m *ContestList) GetEntry() []*Contest {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Problem struct {
	Id             *Problem_Id              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Info           map[string]*Problem_Info `protobuf:"bytes,2,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResourceLimits *Problem_ResourceLimits  `protobuf:"bytes,3,opt,name=resource_limits" json:"resource_limits,omitempty"`
	Statement      *Problem_Statement       `protobuf:"bytes,4,opt,name=statement" json:"statement,omitempty"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}

func (m *Problem) GetId() *Problem_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Problem) GetInfo() map[string]*Problem_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Problem) GetResourceLimits() *Problem_ResourceLimits {
	if m != nil {
		return m.ResourceLimits
	}
	return nil
}

func (m *Problem) GetStatement() *Problem_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

type Problem_Id struct {
	Value   string      `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Contest *Contest_Id `protobuf:"bytes,2,opt,name=contest" json:"contest,omitempty"`
}

func (m *Problem_Id) Reset()         { *m = Problem_Id{} }
func (m *Problem_Id) String() string { return proto.CompactTextString(m) }
func (*Problem_Id) ProtoMessage()    {}

func (m *Problem_Id) GetContest() *Contest_Id {
	if m != nil {
		return m.Contest
	}
	return nil
}

type Problem_Info struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Problem_Info) Reset()         { *m = Problem_Info{} }
func (m *Problem_Info) String() string { return proto.CompactTextString(m) }
func (*Problem_Info) ProtoMessage()    {}

type Problem_ResourceLimits struct {
	TimeLimitMillis  uint64 `protobuf:"varint,1,opt,name=time_limit_millis" json:"time_limit_millis,omitempty"`
	MemoryLimitBytes uint64 `protobuf:"varint,2,opt,name=memory_limit_bytes" json:"memory_limit_bytes,omitempty"`
}

func (m *Problem_ResourceLimits) Reset()         { *m = Problem_ResourceLimits{} }
func (m *Problem_ResourceLimits) String() string { return proto.CompactTextString(m) }
func (*Problem_ResourceLimits) ProtoMessage()    {}

type Problem_Statement struct {
	Version []*Problem_Statement_Version `protobuf:"bytes,1,rep,name=version" json:"version,omitempty"`
}

func (m *Problem_Statement) Reset()         { *m = Problem_Statement{} }
func (m *Problem_Statement) String() string { return proto.CompactTextString(m) }
func (*Problem_Statement) ProtoMessage()    {}

func (m *Problem_Statement) GetVersion() []*Problem_Statement_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type Problem_Statement_Version struct {
	Language string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Format   string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
}

func (m *Problem_Statement_Version) Reset()         { *m = Problem_Statement_Version{} }
func (m *Problem_Statement_Version) String() string { return proto.CompactTextString(m) }
func (*Problem_Statement_Version) ProtoMessage()    {}

type Problem_Statement_Request struct {
	Problem *Problem_Id                `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	Version *Problem_Statement_Version `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *Problem_Statement_Request) Reset()         { *m = Problem_Statement_Request{} }
func (m *Problem_Statement_Request) String() string { return proto.CompactTextString(m) }
func (*Problem_Statement_Request) ProtoMessage()    {}

func (m *Problem_Statement_Request) GetProblem() *Problem_Id {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *Problem_Statement_Request) GetVersion() *Problem_Statement_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type Problem_Statement_Url struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Problem_Statement_Url) Reset()         { *m = Problem_Statement_Url{} }
func (m *Problem_Statement_Url) String() string { return proto.CompactTextString(m) }
func (*Problem_Statement_Url) ProtoMessage()    {}
