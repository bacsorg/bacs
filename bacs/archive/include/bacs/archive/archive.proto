syntax = "proto3";

package bacs.archive;
option go_package = "archive";

import "bacs/archive/problem/flag.proto";
import "bacs/archive/problem/id.proto";
import "bacs/archive/problem/import.proto";
import "bacs/archive/problem/status.proto";
import "bacs/utility/archiver.proto";

import "google/protobuf/empty.proto";

message Chunk {
  utility.Archiver format = 1;
  bytes data = 2;
}

message DownloadRequest {
  problem.IdSet ids = 1;
  utility.Archiver format = 2;
}

message RenameRequest {
  string from = 1;
  string to = 2;
}

message ChangeFlagsRequest {
  problem.IdSet ids = 1;
  problem.FlagSet flag = 2;
}

// Archive revision which changes if any problem is modified.
// Empty revision is never used by the server and can be safely used
// as initial value.
message ArchiveRevision {
  bytes value = 1;
}

message CachedStatusMap {
  problem.StatusMap status = 1;
  ArchiveRevision revision = 2;
}

service Archive {
  rpc Upload(stream Chunk) returns (problem.StatusMap);
  rpc Download(DownloadRequest) returns (stream Chunk);

  rpc Rename(RenameRequest) returns (problem.StatusResult);

  rpc Existing(problem.IdSet) returns (problem.IdSet);
  rpc ExistingAll(google.protobuf.Empty) returns (problem.IdSet);

  rpc Status(problem.IdSet) returns (problem.StatusMap);
  rpc StatusAll(google.protobuf.Empty) returns (problem.StatusMap);
  // Returns CachedStatusMap with empty status if revision is unchanged.
  rpc StatusAllIfChanged(ArchiveRevision) returns (CachedStatusMap);

  rpc ImportResult(problem.IdSet) returns (problem.ImportMap);

  rpc Import(problem.IdSet) returns (problem.StatusMap);
  rpc ImportAll(google.protobuf.Empty) returns (problem.StatusMap);

  // Flag API is not stable. Not intended for public usage.
  rpc WithFlag(problem.IdSet) returns (problem.IdSet);
  rpc WithFlagAll(google.protobuf.Empty) returns (problem.IdSet);
  rpc SetFlags(ChangeFlagsRequest) returns (problem.StatusMap);
  rpc UnsetFlags(ChangeFlagsRequest) returns (problem.StatusMap);
  rpc ClearFlags(problem.IdSet) returns (problem.StatusMap);
}

// Configuration
message ArchiveServiceConfig {
  message Permissions {
    message User {
      repeated string identity = 1;
    }
    bool allow_any = 1;
    repeated User allowed_user = 2;
  }
  string upload_directory = 1;
  Permissions permissions = 2;
}

message ArchiveServerConfig {
  message SslCredentials {
    message PemKeyCertPair {
      string private_key_path = 1;
      string cert_chain_path = 2;
    }
    string pem_root_certs_path = 1;
    repeated PemKeyCertPair pem_key_cert_pair = 2;
    bool force_client_auth = 3;
  }
  string listen = 1;
  ArchiveServiceConfig service = 2;
  oneof credentials {
    SslCredentials ssl_credentials = 3;
  }
}
