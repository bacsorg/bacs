// Code generated by protoc-gen-go.
// source: bacs/archive/problem/status.proto
// DO NOT EDIT!

package problem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem "github.com/bacsorg/problem/go/bacs/problem"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status struct {
	Flags    *FlagSet               `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	Revision *bacs_problem.Revision `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}

func (m *Status) GetFlags() *FlagSet {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *Status) GetRevision() *bacs_problem.Revision {
	if m != nil {
		return m.Revision
	}
	return nil
}

type StatusResult struct {
	// Types that are valid to be assigned to Result:
	//	*StatusResult_Error
	//	*StatusResult_Status
	Result isStatusResult_Result `protobuf_oneof:"result"`
}

func (m *StatusResult) Reset()         { *m = StatusResult{} }
func (m *StatusResult) String() string { return proto.CompactTextString(m) }
func (*StatusResult) ProtoMessage()    {}

type isStatusResult_Result interface {
	isStatusResult_Result()
}

type StatusResult_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,oneof"`
}
type StatusResult_Status struct {
	Status *Status `protobuf:"bytes,2,opt,name=status,oneof"`
}

func (*StatusResult_Error) isStatusResult_Result()  {}
func (*StatusResult_Status) isStatusResult_Result() {}

func (m *StatusResult) GetResult() isStatusResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *StatusResult) GetError() *Error {
	if x, ok := m.GetResult().(*StatusResult_Error); ok {
		return x.Error
	}
	return nil
}

func (m *StatusResult) GetStatus() *Status {
	if x, ok := m.GetResult().(*StatusResult_Status); ok {
		return x.Status
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StatusResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _StatusResult_OneofMarshaler, _StatusResult_OneofUnmarshaler, []interface{}{
		(*StatusResult_Error)(nil),
		(*StatusResult_Status)(nil),
	}
}

func _StatusResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StatusResult)
	// result
	switch x := m.Result.(type) {
	case *StatusResult_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *StatusResult_Status:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StatusResult.Result has unexpected type %T", x)
	}
	return nil
}

func _StatusResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StatusResult)
	switch tag {
	case 1: // result.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Result = &StatusResult_Error{msg}
		return true, err
	case 2: // result.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Result = &StatusResult_Status{msg}
		return true, err
	default:
		return false, nil
	}
}

type StatusMap struct {
	Entry map[string]*StatusResult `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMap) Reset()         { *m = StatusMap{} }
func (m *StatusMap) String() string { return proto.CompactTextString(m) }
func (*StatusMap) ProtoMessage()    {}

func (m *StatusMap) GetEntry() map[string]*StatusResult {
	if m != nil {
		return m.Entry
	}
	return nil
}
