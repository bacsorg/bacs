// Code generated by protoc-gen-go.
// source: bacs/archive/problem/flag.proto
// DO NOT EDIT!

package problem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Flag_Reserved int32

const (
	// Reserved default value, should not be used.
	Flag_NONE Flag_Reserved = 0
	// This flag will exclude problem from non-flags and non-status functions.
	// It is set automatically if problem can't be imported.
	Flag_IGNORE Flag_Reserved = 1
	// Exclude problem from operations that
	// can alter problem's archive or problem id, i.e. user
	// will not be able to re-upload problem, rename or remove it.
	// But it is still possible to change problem's flags and import it.
	Flag_LOCKED Flag_Reserved = 2
	// Harder version of LOCKED.
	// It does not allow to edit flags.
	// Only administrator can remove this flag manually.
	Flag_READ_ONLY Flag_Reserved = 3
	// Import is planned and will be done soon.
	Flag_PENDING_IMPORT Flag_Reserved = 4
)

var Flag_Reserved_name = map[int32]string{
	0: "NONE",
	1: "IGNORE",
	2: "LOCKED",
	3: "READ_ONLY",
	4: "PENDING_IMPORT",
}
var Flag_Reserved_value = map[string]int32{
	"NONE":           0,
	"IGNORE":         1,
	"LOCKED":         2,
	"READ_ONLY":      3,
	"PENDING_IMPORT": 4,
}

func (x Flag_Reserved) String() string {
	return proto.EnumName(Flag_Reserved_name, int32(x))
}

type FlagSet struct {
	Flag []*Flag `protobuf:"bytes,1,rep,name=flag" json:"flag,omitempty"`
}

func (m *FlagSet) Reset()         { *m = FlagSet{} }
func (m *FlagSet) String() string { return proto.CompactTextString(m) }
func (*FlagSet) ProtoMessage()    {}

func (m *FlagSet) GetFlag() []*Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

// It is OK to specify reserved flag as custom.
type Flag struct {
	// Types that are valid to be assigned to Flag:
	//	*Flag_Reserved_
	//	*Flag_Custom
	Flag isFlag_Flag `protobuf_oneof:"flag"`
}

func (m *Flag) Reset()         { *m = Flag{} }
func (m *Flag) String() string { return proto.CompactTextString(m) }
func (*Flag) ProtoMessage()    {}

type isFlag_Flag interface {
	isFlag_Flag()
}

type Flag_Reserved_ struct {
	Reserved Flag_Reserved `protobuf:"varint,1,opt,name=reserved,enum=bacs.archive.problem.Flag_Reserved,oneof"`
}
type Flag_Custom struct {
	Custom string `protobuf:"bytes,2,opt,name=custom,oneof"`
}

func (*Flag_Reserved_) isFlag_Flag() {}
func (*Flag_Custom) isFlag_Flag()    {}

func (m *Flag) GetFlag() isFlag_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Flag) GetReserved() Flag_Reserved {
	if x, ok := m.GetFlag().(*Flag_Reserved_); ok {
		return x.Reserved
	}
	return Flag_NONE
}

func (m *Flag) GetCustom() string {
	if x, ok := m.GetFlag().(*Flag_Custom); ok {
		return x.Custom
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Flag) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Flag_OneofMarshaler, _Flag_OneofUnmarshaler, []interface{}{
		(*Flag_Reserved_)(nil),
		(*Flag_Custom)(nil),
	}
}

func _Flag_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Flag)
	// flag
	switch x := m.Flag.(type) {
	case *Flag_Reserved_:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Reserved))
	case *Flag_Custom:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Custom)
	case nil:
	default:
		return fmt.Errorf("Flag.Flag has unexpected type %T", x)
	}
	return nil
}

func _Flag_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Flag)
	switch tag {
	case 1: // flag.reserved
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Flag = &Flag_Reserved_{Flag_Reserved(x)}
		return true, err
	case 2: // flag.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Flag = &Flag_Custom{x}
		return true, err
	default:
		return false, nil
	}
}

func init() {
	proto.RegisterEnum("bacs.archive.problem.Flag_Reserved", Flag_Reserved_name, Flag_Reserved_value)
}
