package bacs.problem.single.result;

import "bacs/problem/single/resource.proto";

message Result
{
    required SystemResult system = 1;
    optional BuildResult build = 2;
    optional SolutionTestingResult testing_result = 3;
}

message SystemResult
{
    enum Status
    {
        OK = 0;
        INVALID_HASH = 1;
    }
    required Status status = 1;
}

message BuildResult
{
    required Execution execution = 1;
    required bytes output = 2;
}

message SolutionTestingResult
{
    repeated TestGroupResult test_group = 1;
}

message Execution
{
    enum Status
    {
        OK = 0;
        ABNORMAL_EXIT = 1;
        MEMORY_LIMIT_EXCEEDED = 2;
        TIME_LIMIT_EXCEEDED = 3;
        OUTPUT_LIMIT_EXCEEDED = 4;
        REAL_TIME_LIMIT_EXCEEDED = 5;
        TERMINATED_BY_SYSTEM = 6;
        FAILED = 7;
    }
    required Status status = 1;
    optional int32 exit_status = 2;
    optional int32 term_sig = 3;
    required ResourceUsage resource_usage = 4;
    optional bytes full = 5;
}

message TestGroupResult
{
    required string id = 1;
    repeated TestResult test = 2;
}

message Judge
{
    enum Status
    {
        OK = 0;
        WRONG_ANSWER = 1;
        PRESENTATION_ERROR = 2;
        QUERIES_LIMIT_EXCEEDED = 3;
        INCORRECT_REQUEST = 4;
        INSUFFICIENT_DATA = 5;

        // special verdicts
        CUSTOM_FAILURE = 500;

        // system failure verdicts
        FAIL_TEST = 999;
        FAILED = 1000;
    }
    required Status status = 1;
    optional string message = 2;

    message Utility
    {
        required Execution execution = 1;
        optional bytes output = 2;
    }
    message AuxiliaryUtility
    {
        required string name = 1;
        required Utility utility = 2;
    }
    message Utilities
    {
        optional Utility interactor = 1;
        optional Utility checker = 2;
        repeated AuxiliaryUtility auxiliary = 1000;
    }
    optional Utilities utilities = 3;
}

message File
{
    required string id = 1;
    required bytes data = 2;
}

message TestResult
{
    enum Status
    {
        OK = 0;
        FAILED = 1;
    }
    required string id = 1;
    required Status status = 2;
    required Execution execution = 3;
    optional Judge judge = 4;
    repeated File file = 5;
}
