// Code generated by protoc-gen-go.
// source: bacs/file/range.proto
// DO NOT EDIT!

package bacs_file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Range_Whence int32

const (
	Range_BEGIN Range_Whence = 0
	Range_END   Range_Whence = 1
)

var Range_Whence_name = map[int32]string{
	0: "BEGIN",
	1: "END",
}
var Range_Whence_value = map[string]int32{
	"BEGIN": 0,
	"END":   1,
}

func (x Range_Whence) String() string {
	return proto.EnumName(Range_Whence_name, int32(x))
}

type Range struct {
	// / Position from which offset will be calculated.
	Whence Range_Whence `protobuf:"varint,1,opt,name=whence,enum=bacs.file.Range_Whence" json:"whence,omitempty"`
	// !
	// Negative or positive offset
	// from position specified by whence field.
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// !
	// Size of chunk will be transmitted.
	//
	// \note If EOF reached size of chunk may be smaller.
	Size uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("bacs.file.Range_Whence", Range_Whence_name, Range_Whence_value)
}
