// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/archive/problem/flag.proto

package problem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Flag_Reserved int32

const (
	// Reserved default value, should not be used.
	Flag_NONE Flag_Reserved = 0
	// This flag will exclude problem from non-flags and non-status functions.
	// It is set automatically if problem can't be imported.
	Flag_IGNORE Flag_Reserved = 1
	// Exclude problem from operations that
	// can alter problem's archive or problem id, i.e. user
	// will not be able to re-upload problem, rename or remove it.
	// But it is still possible to change problem's flags and import it.
	Flag_LOCKED Flag_Reserved = 2
	// Harder version of LOCKED.
	// It does not allow to edit flags.
	// Only administrator can remove this flag manually.
	Flag_READ_ONLY Flag_Reserved = 3
	// Import is planned and will be done soon.
	Flag_PENDING_IMPORT Flag_Reserved = 4
)

var Flag_Reserved_name = map[int32]string{
	0: "NONE",
	1: "IGNORE",
	2: "LOCKED",
	3: "READ_ONLY",
	4: "PENDING_IMPORT",
}
var Flag_Reserved_value = map[string]int32{
	"NONE":           0,
	"IGNORE":         1,
	"LOCKED":         2,
	"READ_ONLY":      3,
	"PENDING_IMPORT": 4,
}

func (x Flag_Reserved) String() string {
	return proto.EnumName(Flag_Reserved_name, int32(x))
}
func (Flag_Reserved) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type FlagSet struct {
	Flag []*Flag `protobuf:"bytes,1,rep,name=flag" json:"flag,omitempty"`
}

func (m *FlagSet) Reset()                    { *m = FlagSet{} }
func (m *FlagSet) String() string            { return proto.CompactTextString(m) }
func (*FlagSet) ProtoMessage()               {}
func (*FlagSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FlagSet) GetFlag() []*Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

// It is OK to specify reserved flag as custom.
type Flag struct {
	// Types that are valid to be assigned to Flag:
	//	*Flag_Reserved_
	//	*Flag_Custom
	Flag isFlag_Flag `protobuf_oneof:"flag"`
}

func (m *Flag) Reset()                    { *m = Flag{} }
func (m *Flag) String() string            { return proto.CompactTextString(m) }
func (*Flag) ProtoMessage()               {}
func (*Flag) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isFlag_Flag interface {
	isFlag_Flag()
}

type Flag_Reserved_ struct {
	Reserved Flag_Reserved `protobuf:"varint,1,opt,name=reserved,enum=bacs.archive.problem.Flag_Reserved,oneof"`
}
type Flag_Custom struct {
	Custom string `protobuf:"bytes,2,opt,name=custom,oneof"`
}

func (*Flag_Reserved_) isFlag_Flag() {}
func (*Flag_Custom) isFlag_Flag()    {}

func (m *Flag) GetFlag() isFlag_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Flag) GetReserved() Flag_Reserved {
	if x, ok := m.GetFlag().(*Flag_Reserved_); ok {
		return x.Reserved
	}
	return Flag_NONE
}

func (m *Flag) GetCustom() string {
	if x, ok := m.GetFlag().(*Flag_Custom); ok {
		return x.Custom
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Flag) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Flag_OneofMarshaler, _Flag_OneofUnmarshaler, _Flag_OneofSizer, []interface{}{
		(*Flag_Reserved_)(nil),
		(*Flag_Custom)(nil),
	}
}

func _Flag_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Flag)
	// flag
	switch x := m.Flag.(type) {
	case *Flag_Reserved_:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Reserved))
	case *Flag_Custom:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Custom)
	case nil:
	default:
		return fmt.Errorf("Flag.Flag has unexpected type %T", x)
	}
	return nil
}

func _Flag_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Flag)
	switch tag {
	case 1: // flag.reserved
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Flag = &Flag_Reserved_{Flag_Reserved(x)}
		return true, err
	case 2: // flag.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Flag = &Flag_Custom{x}
		return true, err
	default:
		return false, nil
	}
}

func _Flag_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Flag)
	// flag
	switch x := m.Flag.(type) {
	case *Flag_Reserved_:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Reserved))
	case *Flag_Custom:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Custom)))
		n += len(x.Custom)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FlagSet)(nil), "bacs.archive.problem.FlagSet")
	proto.RegisterType((*Flag)(nil), "bacs.archive.problem.Flag")
	proto.RegisterEnum("bacs.archive.problem.Flag_Reserved", Flag_Reserved_name, Flag_Reserved_value)
}

func init() { proto.RegisterFile("bacs/archive/problem/flag.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x07, 0xf0, 0x65, 0x2b, 0x5d, 0xfb, 0xc4, 0x11, 0x1e, 0x1e, 0x8a, 0x17, 0x4b, 0xbd, 0xf4,
	0x94, 0xc2, 0x3c, 0x79, 0xdc, 0x6c, 0xdc, 0x8a, 0x33, 0x19, 0xd1, 0x8b, 0x5e, 0x46, 0x5b, 0xe3,
	0x14, 0x3a, 0x3a, 0xd2, 0xba, 0x4f, 0xe7, 0x87, 0x93, 0xcc, 0xe8, 0x49, 0x6f, 0xef, 0x0f, 0xbf,
	0x3f, 0xbc, 0xf7, 0xe0, 0xa2, 0x2a, 0xeb, 0x2e, 0x2b, 0x4d, 0xfd, 0xf6, 0x7e, 0xd0, 0xd9, 0xde,
	0xb4, 0x55, 0xa3, 0x77, 0xd9, 0x6b, 0x53, 0x6e, 0xd9, 0xde, 0xb4, 0x7d, 0x8b, 0x67, 0x16, 0x30,
	0x07, 0x98, 0x03, 0xc9, 0x35, 0x8c, 0x6f, 0x9b, 0x72, 0xfb, 0xa0, 0x7b, 0x64, 0xe0, 0x59, 0x1e,
	0x91, 0x78, 0x94, 0x9e, 0x4c, 0xcf, 0xd9, 0x5f, 0x9e, 0x59, 0xac, 0x8e, 0x2e, 0xf9, 0x24, 0xe0,
	0xd9, 0x88, 0x33, 0x08, 0x8c, 0xee, 0xb4, 0x39, 0xe8, 0x97, 0x88, 0xc4, 0x24, 0x9d, 0x4c, 0x2f,
	0xff, 0x2f, 0x33, 0xe5, 0xe8, 0x72, 0xa0, 0x7e, 0x6b, 0x18, 0x81, 0x5f, 0x7f, 0x74, 0x7d, 0xbb,
	0x8b, 0x86, 0x31, 0x49, 0xc3, 0xe5, 0x40, 0xb9, 0x9c, 0x48, 0x08, 0x7e, 0x1a, 0x18, 0x80, 0x27,
	0xa4, 0xe0, 0x74, 0x80, 0x00, 0x7e, 0xb1, 0x10, 0x52, 0x71, 0x4a, 0xec, 0xbc, 0x92, 0x37, 0x77,
	0x3c, 0xa7, 0x43, 0x3c, 0x85, 0x50, 0xf1, 0x59, 0xbe, 0x91, 0x62, 0xf5, 0x44, 0x47, 0x88, 0x30,
	0x59, 0x73, 0x91, 0x17, 0x62, 0xb1, 0x29, 0xee, 0xd7, 0x52, 0x3d, 0x52, 0x6f, 0xee, 0x7f, 0x9f,
	0x39, 0x0f, 0x9f, 0xc7, 0x6e, 0xaf, 0xca, 0x3f, 0x7e, 0xe8, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0xa1, 0x91, 0x49, 0x32, 0x44, 0x01, 0x00, 0x00,
}
