// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/archive/problem/import.proto

package problem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem "bacs/problem"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImportResult struct {
	// Types that are valid to be assigned to Result:
	//	*ImportResult_Error
	//	*ImportResult_Problem
	Result isImportResult_Result `protobuf_oneof:"result"`
}

func (m *ImportResult) Reset()                    { *m = ImportResult{} }
func (m *ImportResult) String() string            { return proto.CompactTextString(m) }
func (*ImportResult) ProtoMessage()               {}
func (*ImportResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type isImportResult_Result interface {
	isImportResult_Result()
}

type ImportResult_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,oneof"`
}
type ImportResult_Problem struct {
	Problem *bacs_problem.Problem `protobuf:"bytes,2,opt,name=problem,oneof"`
}

func (*ImportResult_Error) isImportResult_Result()   {}
func (*ImportResult_Problem) isImportResult_Result() {}

func (m *ImportResult) GetResult() isImportResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ImportResult) GetError() *Error {
	if x, ok := m.GetResult().(*ImportResult_Error); ok {
		return x.Error
	}
	return nil
}

func (m *ImportResult) GetProblem() *bacs_problem.Problem {
	if x, ok := m.GetResult().(*ImportResult_Problem); ok {
		return x.Problem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ImportResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ImportResult_OneofMarshaler, _ImportResult_OneofUnmarshaler, _ImportResult_OneofSizer, []interface{}{
		(*ImportResult_Error)(nil),
		(*ImportResult_Problem)(nil),
	}
}

func _ImportResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ImportResult)
	// result
	switch x := m.Result.(type) {
	case *ImportResult_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *ImportResult_Problem:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Problem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ImportResult.Result has unexpected type %T", x)
	}
	return nil
}

func _ImportResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ImportResult)
	switch tag {
	case 1: // result.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Result = &ImportResult_Error{msg}
		return true, err
	case 2: // result.problem
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(bacs_problem.Problem)
		err := b.DecodeMessage(msg)
		m.Result = &ImportResult_Problem{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ImportResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ImportResult)
	// result
	switch x := m.Result.(type) {
	case *ImportResult_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ImportResult_Problem:
		s := proto.Size(x.Problem)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImportMap struct {
	Entry map[string]*ImportResult `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ImportMap) Reset()                    { *m = ImportMap{} }
func (m *ImportMap) String() string            { return proto.CompactTextString(m) }
func (*ImportMap) ProtoMessage()               {}
func (*ImportMap) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ImportMap) GetEntry() map[string]*ImportResult {
	if m != nil {
		return m.Entry
	}
	return nil
}

func init() {
	proto.RegisterType((*ImportResult)(nil), "bacs.archive.problem.ImportResult")
	proto.RegisterType((*ImportMap)(nil), "bacs.archive.problem.ImportMap")
}

func init() { proto.RegisterFile("bacs/archive/problem/import.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x4a, 0x4c, 0x2e,
	0xd6, 0x4f, 0x2c, 0x4a, 0xce, 0xc8, 0x2c, 0x4b, 0xd5, 0x2f, 0x28, 0xca, 0x4f, 0xca, 0x49, 0xcd,
	0xd5, 0xcf, 0xcc, 0x2d, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x01,
	0x29, 0xd1, 0x83, 0x2a, 0xd1, 0x83, 0x2a, 0x91, 0x52, 0xc0, 0xaa, 0x31, 0xb5, 0xa8, 0x28, 0xbf,
	0x08, 0xa2, 0x4f, 0x4a, 0x0a, 0xac, 0x02, 0x26, 0x03, 0xa5, 0x21, 0x72, 0x4a, 0x0d, 0x8c, 0x5c,
	0x3c, 0x9e, 0x60, 0x4b, 0x82, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x84, 0x8c, 0xb9, 0x58, 0xc1, 0x7a,
	0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xa4, 0xf5, 0xb0, 0x59, 0xaa, 0xe7, 0x0a, 0x52, 0xe2,
	0xc1, 0x10, 0x04, 0x51, 0x2b, 0x64, 0xc8, 0xc5, 0x0e, 0x95, 0x91, 0x60, 0x02, 0x6b, 0x13, 0x85,
	0x68, 0x83, 0x29, 0x0f, 0x80, 0xd0, 0x1e, 0x0c, 0x41, 0x30, 0x75, 0x4e, 0x1c, 0x5c, 0x6c, 0x45,
	0x60, 0x1b, 0x95, 0x56, 0x33, 0x72, 0x71, 0x42, 0x9c, 0xe0, 0x9b, 0x58, 0x20, 0xe4, 0xc0, 0xc5,
	0x9a, 0x9a, 0x57, 0x52, 0x54, 0x29, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0x85, 0xdd, 0x7e,
	0xb8, 0x7a, 0x3d, 0x57, 0x90, 0x62, 0x30, 0x11, 0x04, 0xd1, 0x28, 0x15, 0xc3, 0xc5, 0x85, 0x10,
	0x14, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x04, 0xfb, 0x86, 0x33, 0x08, 0xc4, 0x14, 0xb2, 0xe0,
	0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x85, 0x3a, 0x55, 0x09, 0x9f, 0x0d, 0x90, 0x40, 0x09, 0x82,
	0x68, 0xb0, 0x62, 0xb2, 0x60, 0x74, 0xe2, 0x8c, 0x82, 0x79, 0x21, 0x89, 0x0d, 0x1c, 0x84, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x95, 0x48, 0x04, 0xbb, 0x01, 0x00, 0x00,
}
