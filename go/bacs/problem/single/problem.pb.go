// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/problem/single/problem.proto

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem_single_process2 "bacs/problem/single/process"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Dependency_Requirement int32

const (
	Dependency_ALL_OK           Dependency_Requirement = 0
	Dependency_ALL_FAIL         Dependency_Requirement = 1
	Dependency_AT_LEAST_ONE_OK  Dependency_Requirement = 2
	Dependency_AT_MOST_ONE_FAIL Dependency_Requirement = 3
	Dependency_AT_LEAST_HALF_OK Dependency_Requirement = 4
)

var Dependency_Requirement_name = map[int32]string{
	0: "ALL_OK",
	1: "ALL_FAIL",
	2: "AT_LEAST_ONE_OK",
	3: "AT_MOST_ONE_FAIL",
	4: "AT_LEAST_HALF_OK",
}
var Dependency_Requirement_value = map[string]int32{
	"ALL_OK":           0,
	"ALL_FAIL":         1,
	"AT_LEAST_ONE_OK":  2,
	"AT_MOST_ONE_FAIL": 3,
	"AT_LEAST_HALF_OK": 4,
}

func (x Dependency_Requirement) String() string {
	return proto.EnumName(Dependency_Requirement_name, int32(x))
}
func (Dependency_Requirement) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

type ProblemExtension struct {
	Tests *Tests `protobuf:"bytes,1,opt,name=tests" json:"tests,omitempty"`
}

func (m *ProblemExtension) Reset()                    { *m = ProblemExtension{} }
func (m *ProblemExtension) String() string            { return proto.CompactTextString(m) }
func (*ProblemExtension) ProtoMessage()               {}
func (*ProblemExtension) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ProblemExtension) GetTests() *Tests {
	if m != nil {
		return m.Tests
	}
	return nil
}

type Tests struct {
	DataSet []string `protobuf:"bytes,1,rep,name=data_set,json=dataSet" json:"data_set,omitempty"`
	TestSet []string `protobuf:"bytes,2,rep,name=test_set,json=testSet" json:"test_set,omitempty"`
}

func (m *Tests) Reset()                    { *m = Tests{} }
func (m *Tests) String() string            { return proto.CompactTextString(m) }
func (*Tests) ProtoMessage()               {}
func (*Tests) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Tests) GetDataSet() []string {
	if m != nil {
		return m.DataSet
	}
	return nil
}

func (m *Tests) GetTestSet() []string {
	if m != nil {
		return m.TestSet
	}
	return nil
}

type ProfileExtension struct {
	TestGroup []*TestGroup `protobuf:"bytes,1,rep,name=test_group,json=testGroup" json:"test_group,omitempty"`
}

func (m *ProfileExtension) Reset()                    { *m = ProfileExtension{} }
func (m *ProfileExtension) String() string            { return proto.CompactTextString(m) }
func (*ProfileExtension) ProtoMessage()               {}
func (*ProfileExtension) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ProfileExtension) GetTestGroup() []*TestGroup {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

type Dependency struct {
	TestGroup   string                 `protobuf:"bytes,1,opt,name=test_group,json=testGroup" json:"test_group,omitempty"`
	Requirement Dependency_Requirement `protobuf:"varint,2,opt,name=requirement,enum=bacs.problem.single.Dependency_Requirement" json:"requirement,omitempty"`
}

func (m *Dependency) Reset()                    { *m = Dependency{} }
func (m *Dependency) String() string            { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()               {}
func (*Dependency) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Dependency) GetTestGroup() string {
	if m != nil {
		return m.TestGroup
	}
	return ""
}

func (m *Dependency) GetRequirement() Dependency_Requirement {
	if m != nil {
		return m.Requirement
	}
	return Dependency_ALL_OK
}

type TestGroup struct {
	Id         string                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Process    *bacs_problem_single_process2.Settings `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Tests      *TestSequence                          `protobuf:"bytes,3,opt,name=tests" json:"tests,omitempty"`
	Dependency []*Dependency                          `protobuf:"bytes,4,rep,name=dependency" json:"dependency,omitempty"`
	// partially per-test if tests.continue_condition == ALL
	// conditionally if tests.continue_condition == WHILE_OK
	Score int64 `protobuf:"varint,5,opt,name=score" json:"score,omitempty"`
}

func (m *TestGroup) Reset()                    { *m = TestGroup{} }
func (m *TestGroup) String() string            { return proto.CompactTextString(m) }
func (*TestGroup) ProtoMessage()               {}
func (*TestGroup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *TestGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestGroup) GetProcess() *bacs_problem_single_process2.Settings {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *TestGroup) GetTests() *TestSequence {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *TestGroup) GetDependency() []*Dependency {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func (m *TestGroup) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*ProblemExtension)(nil), "bacs.problem.single.ProblemExtension")
	proto.RegisterType((*Tests)(nil), "bacs.problem.single.Tests")
	proto.RegisterType((*ProfileExtension)(nil), "bacs.problem.single.ProfileExtension")
	proto.RegisterType((*Dependency)(nil), "bacs.problem.single.Dependency")
	proto.RegisterType((*TestGroup)(nil), "bacs.problem.single.TestGroup")
	proto.RegisterEnum("bacs.problem.single.Dependency_Requirement", Dependency_Requirement_name, Dependency_Requirement_value)
}

func init() { proto.RegisterFile("bacs/problem/single/problem.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd9, 0xa4, 0x49, 0x93, 0x31, 0x2a, 0xd1, 0xb6, 0x07, 0x13, 0x09, 0x48, 0x2d, 0x21,
	0x59, 0x20, 0x39, 0xc8, 0x1c, 0x38, 0x55, 0x95, 0x51, 0x53, 0x40, 0xb8, 0x04, 0xd6, 0x3e, 0x71,
	0xb1, 0x12, 0x7b, 0x08, 0x96, 0xd2, 0xb5, 0xeb, 0xdd, 0x48, 0xf0, 0xbe, 0x1c, 0x79, 0x08, 0xb4,
	0xbb, 0x76, 0x63, 0x21, 0x47, 0xbd, 0x79, 0x66, 0xbe, 0x7f, 0x76, 0x66, 0xfc, 0xc3, 0xf9, 0x7a,
	0x95, 0x8a, 0x79, 0x59, 0x15, 0xeb, 0x2d, 0xde, 0xce, 0x45, 0xce, 0x37, 0x5b, 0x6c, 0x42, 0xaf,
	0xac, 0x0a, 0x59, 0xd0, 0x53, 0x85, 0x78, 0x4d, 0xce, 0x20, 0xd3, 0x57, 0x07, 0x74, 0x29, 0x0a,
	0x31, 0x17, 0x28, 0x65, 0xce, 0x37, 0xc2, 0x34, 0x98, 0x76, 0xbe, 0x21, 0x51, 0x28, 0xc6, 0x20,
	0xce, 0x15, 0x4c, 0xbe, 0x9a, 0xfa, 0xe2, 0x97, 0x44, 0x2e, 0xf2, 0x82, 0xd3, 0x37, 0x30, 0x50,
	0x90, 0xb0, 0xc9, 0x8c, 0xb8, 0x96, 0x3f, 0xf5, 0x3a, 0xe6, 0xf0, 0x62, 0x45, 0x30, 0x03, 0x3a,
	0x17, 0x30, 0xd0, 0x31, 0x7d, 0x0a, 0xa3, 0x6c, 0x25, 0x57, 0x89, 0x40, 0x69, 0x93, 0x59, 0xdf,
	0x1d, 0xb3, 0x63, 0x15, 0x47, 0x28, 0x55, 0x49, 0xc1, 0xba, 0xd4, 0x33, 0x25, 0x15, 0x47, 0x28,
	0x9d, 0x6f, 0x7a, 0x88, 0x1f, 0xf9, 0x16, 0xf7, 0x43, 0x5c, 0x00, 0x68, 0x7c, 0x53, 0x15, 0xbb,
	0x52, 0xf7, 0xb2, 0xfc, 0xe7, 0x07, 0x27, 0xf9, 0xa0, 0x28, 0x36, 0x96, 0xcd, 0xa7, 0xf3, 0x87,
	0x00, 0x5c, 0x61, 0x89, 0x3c, 0x43, 0x9e, 0xfe, 0xa6, 0xcf, 0xfe, 0xeb, 0x46, 0xdc, 0x71, 0x8b,
	0xa6, 0x37, 0x60, 0x55, 0x78, 0xb7, 0xcb, 0x2b, 0xbc, 0x45, 0xae, 0xc6, 0x23, 0xee, 0x89, 0xff,
	0xba, 0xf3, 0xb5, 0x7d, 0x53, 0x8f, 0xed, 0x25, 0xac, 0xad, 0x77, 0x7e, 0x82, 0xd5, 0xaa, 0x51,
	0x80, 0x61, 0x10, 0x86, 0xc9, 0xf2, 0xf3, 0xe4, 0x11, 0x7d, 0x0c, 0x23, 0xf5, 0x7d, 0x1d, 0x7c,
	0x0a, 0x27, 0x84, 0x9e, 0xc2, 0x93, 0x20, 0x4e, 0xc2, 0x45, 0x10, 0xc5, 0xc9, 0xf2, 0xcb, 0x42,
	0x21, 0x3d, 0x7a, 0x06, 0x93, 0x20, 0x4e, 0x6e, 0x96, 0x75, 0x4e, 0xa3, 0xfd, 0x3a, 0x6b, 0xd0,
	0x8f, 0x41, 0x78, 0xad, 0xd8, 0x23, 0xe7, 0x2f, 0x81, 0xf1, 0xfd, 0xfe, 0xf4, 0x04, 0x7a, 0x79,
	0x56, 0x6f, 0xd7, 0xcb, 0x33, 0x7a, 0x09, 0xc7, 0xb5, 0x33, 0xf4, 0x4a, 0x96, 0xff, 0xb2, 0x73,
	0xa5, 0x9a, 0xf1, 0xa2, 0xda, 0x3d, 0xac, 0x51, 0xd1, 0x77, 0x8d, 0x13, 0xfa, 0x5a, 0x7e, 0x7e,
	0xf0, 0xfe, 0x11, 0xde, 0xed, 0x90, 0xa7, 0x58, 0x1b, 0x82, 0x5e, 0x02, 0x64, 0xf7, 0x87, 0xb2,
	0x8f, 0xf4, 0xdf, 0x7b, 0xf1, 0xc0, 0x3d, 0x59, 0x4b, 0x42, 0xcf, 0x60, 0x20, 0xd2, 0xa2, 0x42,
	0x7b, 0x30, 0x23, 0x6e, 0x9f, 0x99, 0xe0, 0xfd, 0xe8, 0xfb, 0xd0, 0xc8, 0xd6, 0x43, 0x6d, 0xdf,
	0xb7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x71, 0x45, 0x0b, 0x9c, 0x47, 0x03, 0x00, 0x00,
}
