// Code generated by protoc-gen-go.
// source: bacs/problem/single/problem.proto
// DO NOT EDIT!

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem_single_process2 "github.com/bacsorg/problem_single/go/bacs/problem/single/process"
import bacs_problem_single_test1 "github.com/bacsorg/problem_single/go/bacs/problem/single/test"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Dependency_Requirement int32

const (
	Dependency_ALL_OK           Dependency_Requirement = 0
	Dependency_ALL_FAIL         Dependency_Requirement = 1
	Dependency_AT_LEAST_ONE_OK  Dependency_Requirement = 2
	Dependency_AT_MOST_ONE_FAIL Dependency_Requirement = 3
	Dependency_AT_LEAST_HALF_OK Dependency_Requirement = 4
)

var Dependency_Requirement_name = map[int32]string{
	0: "ALL_OK",
	1: "ALL_FAIL",
	2: "AT_LEAST_ONE_OK",
	3: "AT_MOST_ONE_FAIL",
	4: "AT_LEAST_HALF_OK",
}
var Dependency_Requirement_value = map[string]int32{
	"ALL_OK":           0,
	"ALL_FAIL":         1,
	"AT_LEAST_ONE_OK":  2,
	"AT_MOST_ONE_FAIL": 3,
	"AT_LEAST_HALF_OK": 4,
}

func (x Dependency_Requirement) String() string {
	return proto.EnumName(Dependency_Requirement_name, int32(x))
}

type ProblemExtension struct {
	Tests *Tests `protobuf:"bytes,1,opt,name=tests" json:"tests,omitempty"`
}

func (m *ProblemExtension) Reset()         { *m = ProblemExtension{} }
func (m *ProblemExtension) String() string { return proto.CompactTextString(m) }
func (*ProblemExtension) ProtoMessage()    {}

func (m *ProblemExtension) GetTests() *Tests {
	if m != nil {
		return m.Tests
	}
	return nil
}

type Tests struct {
	DataSet []string `protobuf:"bytes,1,rep,name=data_set" json:"data_set,omitempty"`
	TestSet []string `protobuf:"bytes,2,rep,name=test_set" json:"test_set,omitempty"`
}

func (m *Tests) Reset()         { *m = Tests{} }
func (m *Tests) String() string { return proto.CompactTextString(m) }
func (*Tests) ProtoMessage()    {}

type ProfileExtension struct {
	TestGroup []*TestGroup `protobuf:"bytes,1,rep,name=test_group" json:"test_group,omitempty"`
}

func (m *ProfileExtension) Reset()         { *m = ProfileExtension{} }
func (m *ProfileExtension) String() string { return proto.CompactTextString(m) }
func (*ProfileExtension) ProtoMessage()    {}

func (m *ProfileExtension) GetTestGroup() []*TestGroup {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

type Dependency struct {
	TestGroup   string                 `protobuf:"bytes,1,opt,name=test_group" json:"test_group,omitempty"`
	Requirement Dependency_Requirement `protobuf:"varint,2,opt,name=requirement,enum=bacs.problem.single.Dependency_Requirement" json:"requirement,omitempty"`
}

func (m *Dependency) Reset()         { *m = Dependency{} }
func (m *Dependency) String() string { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()    {}

type TestGroup struct {
	Id         string                                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Process    *bacs_problem_single_process2.Settings `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Tests      *bacs_problem_single_test1.Sequence    `protobuf:"bytes,3,opt,name=tests" json:"tests,omitempty"`
	Dependency []*Dependency                          `protobuf:"bytes,4,rep,name=dependency" json:"dependency,omitempty"`
}

func (m *TestGroup) Reset()         { *m = TestGroup{} }
func (m *TestGroup) String() string { return proto.CompactTextString(m) }
func (*TestGroup) ProtoMessage()    {}

func (m *TestGroup) GetProcess() *bacs_problem_single_process2.Settings {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *TestGroup) GetTests() *bacs_problem_single_test1.Sequence {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *TestGroup) GetDependency() []*Dependency {
	if m != nil {
		return m.Dependency
	}
	return nil
}

func init() {
	proto.RegisterEnum("bacs.problem.single.Dependency_Requirement", Dependency_Requirement_name, Dependency_Requirement_value)
}
