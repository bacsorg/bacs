// Code generated by protoc-gen-go.
// source: bacs/problem/single/process/file.proto
// DO NOT EDIT!

package process

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_file "github.com/bacsorg/common/go/bacs/file"
import bacs_file1 "github.com/bacsorg/common/go/bacs/file"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type File_Permissions int32

const (
	File_READ    File_Permissions = 0
	File_WRITE   File_Permissions = 1
	File_EXECUTE File_Permissions = 2
)

var File_Permissions_name = map[int32]string{
	0: "READ",
	1: "WRITE",
	2: "EXECUTE",
}
var File_Permissions_value = map[string]int32{
	"READ":    0,
	"WRITE":   1,
	"EXECUTE": 2,
}

func (x File_Permissions) String() string {
	return proto.EnumName(File_Permissions_name, int32(x))
}

type File struct {
	Id         string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Permission []File_Permissions `protobuf:"varint,2,rep,name=permission,enum=bacs.problem.single.process.File_Permissions" json:"permission,omitempty"`
	// DataId
	Init string `protobuf:"bytes,3,opt,name=init" json:"init,omitempty"`
	// arbitrary paths are not supported and stripped to filename
	Path    *bacs_file.Path   `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Receive *bacs_file1.Range `protobuf:"bytes,5,opt,name=receive" json:"receive,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}

func (m *File) GetPath() *bacs_file.Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *File) GetReceive() *bacs_file1.Range {
	if m != nil {
		return m.Receive
	}
	return nil
}

func init() {
	proto.RegisterEnum("bacs.problem.single.process.File_Permissions", File_Permissions_name, File_Permissions_value)
}
