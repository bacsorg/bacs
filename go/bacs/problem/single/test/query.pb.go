// Code generated by protoc-gen-go.
// source: bacs/problem/single/test/query.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	bacs/problem/single/test/query.proto
	bacs/problem/single/test/sequence.proto

It has these top-level messages:
	Query
	WildcardQuery
	RegexQuery
	Sequence
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WildcardQuery_Flag int32

const (
	WildcardQuery_IGNORE_CASE WildcardQuery_Flag = 0
)

var WildcardQuery_Flag_name = map[int32]string{
	0: "IGNORE_CASE",
}
var WildcardQuery_Flag_value = map[string]int32{
	"IGNORE_CASE": 0,
}

func (x WildcardQuery_Flag) String() string {
	return proto.EnumName(WildcardQuery_Flag_name, int32(x))
}

type RegexQuery_Flag int32

const (
	RegexQuery_IGNORE_CASE RegexQuery_Flag = 0
)

var RegexQuery_Flag_name = map[int32]string{
	0: "IGNORE_CASE",
}
var RegexQuery_Flag_value = map[string]int32{
	"IGNORE_CASE": 0,
}

func (x RegexQuery_Flag) String() string {
	return proto.EnumName(RegexQuery_Flag_name, int32(x))
}

type Query struct {
	// Types that are valid to be assigned to Query:
	//	*Query_Id
	//	*Query_Wildcard
	//	*Query_Regex
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type Query_Wildcard struct {
	Wildcard *WildcardQuery `protobuf:"bytes,2,opt,name=wildcard,oneof"`
}
type Query_Regex struct {
	Regex *RegexQuery `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*Query_Id) isQuery_Query()       {}
func (*Query_Wildcard) isQuery_Query() {}
func (*Query_Regex) isQuery_Query()    {}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Query) GetId() string {
	if x, ok := m.GetQuery().(*Query_Id); ok {
		return x.Id
	}
	return ""
}

func (m *Query) GetWildcard() *WildcardQuery {
	if x, ok := m.GetQuery().(*Query_Wildcard); ok {
		return x.Wildcard
	}
	return nil
}

func (m *Query) GetRegex() *RegexQuery {
	if x, ok := m.GetQuery().(*Query_Regex); ok {
		return x.Regex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Query) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Query_OneofMarshaler, _Query_OneofUnmarshaler, []interface{}{
		(*Query_Id)(nil),
		(*Query_Wildcard)(nil),
		(*Query_Regex)(nil),
	}
}

func _Query_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Query)
	// query
	switch x := m.Query.(type) {
	case *Query_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *Query_Wildcard:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Wildcard); err != nil {
			return err
		}
	case *Query_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Regex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Query.Query has unexpected type %T", x)
	}
	return nil
}

func _Query_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Query)
	switch tag {
	case 1: // query.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Query = &Query_Id{x}
		return true, err
	case 2: // query.wildcard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WildcardQuery)
		err := b.DecodeMessage(msg)
		m.Query = &Query_Wildcard{msg}
		return true, err
	case 3: // query.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegexQuery)
		err := b.DecodeMessage(msg)
		m.Query = &Query_Regex{msg}
		return true, err
	default:
		return false, nil
	}
}

type WildcardQuery struct {
	Flag  []WildcardQuery_Flag `protobuf:"varint,1,rep,name=flag,enum=bacs.problem.single.test.WildcardQuery_Flag" json:"flag,omitempty"`
	Value string               `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *WildcardQuery) Reset()         { *m = WildcardQuery{} }
func (m *WildcardQuery) String() string { return proto.CompactTextString(m) }
func (*WildcardQuery) ProtoMessage()    {}

type RegexQuery struct {
	Flag  []RegexQuery_Flag `protobuf:"varint,1,rep,name=flag,enum=bacs.problem.single.test.RegexQuery_Flag" json:"flag,omitempty"`
	Value string            `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *RegexQuery) Reset()         { *m = RegexQuery{} }
func (m *RegexQuery) String() string { return proto.CompactTextString(m) }
func (*RegexQuery) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("bacs.problem.single.test.WildcardQuery_Flag", WildcardQuery_Flag_name, WildcardQuery_Flag_value)
	proto.RegisterEnum("bacs.problem.single.test.RegexQuery_Flag", RegexQuery_Flag_name, RegexQuery_Flag_value)
}
