// Code generated by protoc-gen-go.
// source: bacs/problem/single/test/sequence.proto
// DO NOT EDIT!

package bacs_problem_single_test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Sequence_Order int32

const (
	Sequence_IDENTITY        Sequence_Order = 0
	Sequence_NUMERIC         Sequence_Order = 1
	Sequence_LEXICOGRAPHICAL Sequence_Order = 2
)

var Sequence_Order_name = map[int32]string{
	0: "IDENTITY",
	1: "NUMERIC",
	2: "LEXICOGRAPHICAL",
}
var Sequence_Order_value = map[string]int32{
	"IDENTITY":        0,
	"NUMERIC":         1,
	"LEXICOGRAPHICAL": 2,
}

func (x Sequence_Order) String() string {
	return proto.EnumName(Sequence_Order_name, int32(x))
}

type Sequence_ContinueCondition int32

const (
	Sequence_ALWAYS   Sequence_ContinueCondition = 0
	Sequence_WHILE_OK Sequence_ContinueCondition = 1
)

var Sequence_ContinueCondition_name = map[int32]string{
	0: "ALWAYS",
	1: "WHILE_OK",
}
var Sequence_ContinueCondition_value = map[string]int32{
	"ALWAYS":   0,
	"WHILE_OK": 1,
}

func (x Sequence_ContinueCondition) String() string {
	return proto.EnumName(Sequence_ContinueCondition_name, int32(x))
}

type Sequence struct {
	Query             []*Query                   `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
	Order             Sequence_Order             `protobuf:"varint,2,opt,name=order,enum=bacs.problem.single.test.Sequence_Order" json:"order,omitempty"`
	ContinueCondition Sequence_ContinueCondition `protobuf:"varint,3,opt,name=continue_condition,enum=bacs.problem.single.test.Sequence_ContinueCondition" json:"continue_condition,omitempty"`
}

func (m *Sequence) Reset()         { *m = Sequence{} }
func (m *Sequence) String() string { return proto.CompactTextString(m) }
func (*Sequence) ProtoMessage()    {}

func (m *Sequence) GetQuery() []*Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func init() {
	proto.RegisterEnum("bacs.problem.single.test.Sequence_Order", Sequence_Order_name, Sequence_Order_value)
	proto.RegisterEnum("bacs.problem.single.test.Sequence_ContinueCondition", Sequence_ContinueCondition_name, Sequence_ContinueCondition_value)
}
