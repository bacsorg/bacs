// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/problem/single/task.proto

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem1 "bacs/problem"
import bacs_process1 "bacs/process"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// !
// \brief Task for testing system
type Task struct {
	// !
	// \brief Problem hash.
	//
	// If is not the same as worker's, task is rejected.
	System   *bacs_problem1.System    `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Solution *bacs_process1.Buildable `protobuf:"bytes,2,opt,name=solution" json:"solution,omitempty"`
	Profile  *bacs_problem1.Profile   `protobuf:"bytes,3,opt,name=profile" json:"profile,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Task) GetSystem() *bacs_problem1.System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Task) GetSolution() *bacs_process1.Buildable {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *Task) GetProfile() *bacs_problem1.Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "bacs.problem.single.Task")
}

func init() { proto.RegisterFile("bacs/problem/single/task.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0xc1, 0x0a, 0x82, 0x30,
	0x1c, 0xc7, 0x71, 0xac, 0x30, 0x59, 0xb7, 0x55, 0x64, 0x1e, 0x22, 0x3a, 0x75, 0x88, 0x0d, 0xf2,
	0x0d, 0x7c, 0x82, 0xb0, 0x4e, 0xdd, 0x36, 0x5b, 0x31, 0x9c, 0x4e, 0xf6, 0x9f, 0x87, 0x5e, 0xa5,
	0xa7, 0x0d, 0x37, 0x15, 0x3c, 0x7f, 0xbe, 0x7f, 0x7e, 0x1b, 0x3a, 0x70, 0x56, 0x00, 0x6d, 0x8c,
	0xe6, 0x4a, 0x54, 0x14, 0x64, 0xfd, 0x51, 0x82, 0x5a, 0x06, 0x25, 0x69, 0x8c, 0xb6, 0x1a, 0xaf,
	0x3b, 0x27, 0xbd, 0x13, 0xef, 0x49, 0x32, 0x39, 0x1a, 0xd0, 0x1d, 0x24, 0xfb, 0xc1, 0x0a, 0x01,
	0x40, 0x41, 0xb7, 0xa6, 0x10, 0x9e, 0x4e, 0xbf, 0x00, 0x2d, 0x1e, 0x0c, 0x4a, 0x7c, 0x41, 0x21,
	0x7c, 0xc1, 0x8a, 0x2a, 0x0e, 0x8e, 0xc1, 0x79, 0x75, 0xdd, 0x90, 0xc9, 0xca, 0xdd, 0x59, 0xde,
	0x37, 0x38, 0x45, 0x11, 0x68, 0xd5, 0x5a, 0xa9, 0xeb, 0x78, 0xe6, 0xfa, 0xdd, 0xd8, 0x77, 0x23,
	0x24, 0x6b, 0xa5, 0x7a, 0x31, 0xae, 0x44, 0x3e, 0x86, 0x98, 0xa2, 0x65, 0x63, 0xf4, 0x5b, 0x2a,
	0x11, 0xcf, 0xdd, 0xcd, 0x76, 0xba, 0x71, 0xf3, 0x98, 0x0f, 0x55, 0x16, 0x3d, 0x43, 0xff, 0x3b,
	0x1e, 0xba, 0xd7, 0xa6, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x1a, 0xc8, 0x83, 0x1b, 0x01,
	0x00, 0x00,
}
