// Code generated by protoc-gen-go.
// source: bacs/problem/single/result.proto
// DO NOT EDIT!

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem "github.com/bacsorg/problem/go/bacs/problem"

// discarding unused import bacs_process "github.com/bacsorg/common/go/bacs/process"
import bacs_process1 "github.com/bacsorg/common/go/bacs/process"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestResult_Status int32

const (
	TestResult_OK      TestResult_Status = 0
	TestResult_FAILED  TestResult_Status = 1
	TestResult_SKIPPED TestResult_Status = 2
)

var TestResult_Status_name = map[int32]string{
	0: "OK",
	1: "FAILED",
	2: "SKIPPED",
}
var TestResult_Status_value = map[string]int32{
	"OK":      0,
	"FAILED":  1,
	"SKIPPED": 2,
}

func (x TestResult_Status) String() string {
	return proto.EnumName(TestResult_Status_name, int32(x))
}

type JudgeResult_Status int32

const (
	JudgeResult_OK                                   JudgeResult_Status = 0
	JudgeResult_WRONG_ANSWER                         JudgeResult_Status = 1
	JudgeResult_PRESENTATION_ERROR                   JudgeResult_Status = 2
	JudgeResult_QUERIES_LIMIT_EXCEEDED               JudgeResult_Status = 3
	JudgeResult_INCORRECT_REQUEST                    JudgeResult_Status = 4
	JudgeResult_INSUFFICIENT_DATA                    JudgeResult_Status = 5
	JudgeResult_EXCESS_DATA                          JudgeResult_Status = 6
	JudgeResult_OUTPUT_LIMIT_EXCEEDED                JudgeResult_Status = 7
	JudgeResult_TERMINATION_REAL_TIME_LIMIT_EXCEEDED JudgeResult_Status = 8
	// special verdicts
	JudgeResult_CUSTOM_FAILURE JudgeResult_Status = 500
	// system failure verdicts
	JudgeResult_FAIL_TEST JudgeResult_Status = 999
	JudgeResult_FAILED    JudgeResult_Status = 1000
	// judge status is meaningless
	JudgeResult_SKIPPED JudgeResult_Status = 2000
)

var JudgeResult_Status_name = map[int32]string{
	0:    "OK",
	1:    "WRONG_ANSWER",
	2:    "PRESENTATION_ERROR",
	3:    "QUERIES_LIMIT_EXCEEDED",
	4:    "INCORRECT_REQUEST",
	5:    "INSUFFICIENT_DATA",
	6:    "EXCESS_DATA",
	7:    "OUTPUT_LIMIT_EXCEEDED",
	8:    "TERMINATION_REAL_TIME_LIMIT_EXCEEDED",
	500:  "CUSTOM_FAILURE",
	999:  "FAIL_TEST",
	1000: "FAILED",
	2000: "SKIPPED",
}
var JudgeResult_Status_value = map[string]int32{
	"OK":                                   0,
	"WRONG_ANSWER":                         1,
	"PRESENTATION_ERROR":                   2,
	"QUERIES_LIMIT_EXCEEDED":               3,
	"INCORRECT_REQUEST":                    4,
	"INSUFFICIENT_DATA":                    5,
	"EXCESS_DATA":                          6,
	"OUTPUT_LIMIT_EXCEEDED":                7,
	"TERMINATION_REAL_TIME_LIMIT_EXCEEDED": 8,
	"CUSTOM_FAILURE":                       500,
	"FAIL_TEST":                            999,
	"FAILED":                               1000,
	"SKIPPED":                              2000,
}

func (x JudgeResult_Status) String() string {
	return proto.EnumName(JudgeResult_Status_name, int32(x))
}

type Result struct {
	System    *bacs_problem.SystemResult `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Build     *bacs_process1.BuildResult `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
	TestGroup []*TestGroupResult         `protobuf:"bytes,3,rep,name=test_group" json:"test_group,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}

func (m *Result) GetSystem() *bacs_problem.SystemResult {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Result) GetBuild() *bacs_process1.BuildResult {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *Result) GetTestGroup() []*TestGroupResult {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

type TestGroupResult struct {
	Id       string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Executed bool          `protobuf:"varint,2,opt,name=executed" json:"executed,omitempty"`
	Test     []*TestResult `protobuf:"bytes,3,rep,name=test" json:"test,omitempty"`
}

func (m *TestGroupResult) Reset()         { *m = TestGroupResult{} }
func (m *TestGroupResult) String() string { return proto.CompactTextString(m) }
func (*TestGroupResult) ProtoMessage()    {}

func (m *TestGroupResult) GetTest() []*TestResult {
	if m != nil {
		return m.Test
	}
	return nil
}

type TestResult struct {
	Id        string                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    TestResult_Status              `protobuf:"varint,2,opt,name=status,enum=bacs.problem.single.TestResult_Status" json:"status,omitempty"`
	Execution *bacs_process1.ExecutionResult `protobuf:"bytes,3,opt,name=execution" json:"execution,omitempty"`
	Judge     *JudgeResult                   `protobuf:"bytes,4,opt,name=judge" json:"judge,omitempty"`
	File      []*FileResult                  `protobuf:"bytes,5,rep,name=file" json:"file,omitempty"`
}

func (m *TestResult) Reset()         { *m = TestResult{} }
func (m *TestResult) String() string { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()    {}

func (m *TestResult) GetExecution() *bacs_process1.ExecutionResult {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *TestResult) GetJudge() *JudgeResult {
	if m != nil {
		return m.Judge
	}
	return nil
}

func (m *TestResult) GetFile() []*FileResult {
	if m != nil {
		return m.File
	}
	return nil
}

type JudgeResult struct {
	Status    JudgeResult_Status     `protobuf:"varint,1,opt,name=status,enum=bacs.problem.single.JudgeResult_Status" json:"status,omitempty"`
	Message   string                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Utilities *JudgeResult_Utilities `protobuf:"bytes,3,opt,name=utilities" json:"utilities,omitempty"`
}

func (m *JudgeResult) Reset()         { *m = JudgeResult{} }
func (m *JudgeResult) String() string { return proto.CompactTextString(m) }
func (*JudgeResult) ProtoMessage()    {}

func (m *JudgeResult) GetUtilities() *JudgeResult_Utilities {
	if m != nil {
		return m.Utilities
	}
	return nil
}

type JudgeResult_Utility struct {
	Execution *bacs_process1.ExecutionResult `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
	Output    []byte                         `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *JudgeResult_Utility) Reset()         { *m = JudgeResult_Utility{} }
func (m *JudgeResult_Utility) String() string { return proto.CompactTextString(m) }
func (*JudgeResult_Utility) ProtoMessage()    {}

func (m *JudgeResult_Utility) GetExecution() *bacs_process1.ExecutionResult {
	if m != nil {
		return m.Execution
	}
	return nil
}

type JudgeResult_AuxiliaryUtility struct {
	Name    string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Utility *JudgeResult_Utility `protobuf:"bytes,2,opt,name=utility" json:"utility,omitempty"`
}

func (m *JudgeResult_AuxiliaryUtility) Reset()         { *m = JudgeResult_AuxiliaryUtility{} }
func (m *JudgeResult_AuxiliaryUtility) String() string { return proto.CompactTextString(m) }
func (*JudgeResult_AuxiliaryUtility) ProtoMessage()    {}

func (m *JudgeResult_AuxiliaryUtility) GetUtility() *JudgeResult_Utility {
	if m != nil {
		return m.Utility
	}
	return nil
}

type JudgeResult_Utilities struct {
	Interactor *JudgeResult_Utility            `protobuf:"bytes,1,opt,name=interactor" json:"interactor,omitempty"`
	Checker    *JudgeResult_Utility            `protobuf:"bytes,2,opt,name=checker" json:"checker,omitempty"`
	Auxiliary  []*JudgeResult_AuxiliaryUtility `protobuf:"bytes,1000,rep,name=auxiliary" json:"auxiliary,omitempty"`
}

func (m *JudgeResult_Utilities) Reset()         { *m = JudgeResult_Utilities{} }
func (m *JudgeResult_Utilities) String() string { return proto.CompactTextString(m) }
func (*JudgeResult_Utilities) ProtoMessage()    {}

func (m *JudgeResult_Utilities) GetInteractor() *JudgeResult_Utility {
	if m != nil {
		return m.Interactor
	}
	return nil
}

func (m *JudgeResult_Utilities) GetChecker() *JudgeResult_Utility {
	if m != nil {
		return m.Checker
	}
	return nil
}

func (m *JudgeResult_Utilities) GetAuxiliary() []*JudgeResult_AuxiliaryUtility {
	if m != nil {
		return m.Auxiliary
	}
	return nil
}

type FileResult struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FileResult) Reset()         { *m = FileResult{} }
func (m *FileResult) String() string { return proto.CompactTextString(m) }
func (*FileResult) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("bacs.problem.single.TestResult_Status", TestResult_Status_name, TestResult_Status_value)
	proto.RegisterEnum("bacs.problem.single.JudgeResult_Status", JudgeResult_Status_name, JudgeResult_Status_value)
}
