// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/problem/single/result.proto

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bacs_problem "bacs/problem"
import _ "bacs/process"
import bacs_process1 "bacs/process"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestResult_Status int32

const (
	TestResult_OK      TestResult_Status = 0
	TestResult_FAILED  TestResult_Status = 1
	TestResult_SKIPPED TestResult_Status = 2
)

var TestResult_Status_name = map[int32]string{
	0: "OK",
	1: "FAILED",
	2: "SKIPPED",
}
var TestResult_Status_value = map[string]int32{
	"OK":      0,
	"FAILED":  1,
	"SKIPPED": 2,
}

func (x TestResult_Status) String() string {
	return proto.EnumName(TestResult_Status_name, int32(x))
}
func (TestResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0} }

type JudgeResult_Status int32

const (
	JudgeResult_OK                                   JudgeResult_Status = 0
	JudgeResult_WRONG_ANSWER                         JudgeResult_Status = 1
	JudgeResult_PRESENTATION_ERROR                   JudgeResult_Status = 2
	JudgeResult_QUERIES_LIMIT_EXCEEDED               JudgeResult_Status = 3
	JudgeResult_INCORRECT_REQUEST                    JudgeResult_Status = 4
	JudgeResult_INSUFFICIENT_DATA                    JudgeResult_Status = 5
	JudgeResult_EXCESS_DATA                          JudgeResult_Status = 6
	JudgeResult_OUTPUT_LIMIT_EXCEEDED                JudgeResult_Status = 7
	JudgeResult_TERMINATION_REAL_TIME_LIMIT_EXCEEDED JudgeResult_Status = 8
	// special verdicts
	JudgeResult_CUSTOM_FAILURE JudgeResult_Status = 500
	// system failure verdicts
	JudgeResult_FAIL_TEST JudgeResult_Status = 999
	JudgeResult_FAILED    JudgeResult_Status = 1000
	// judge status is meaningless
	JudgeResult_SKIPPED JudgeResult_Status = 2000
)

var JudgeResult_Status_name = map[int32]string{
	0:    "OK",
	1:    "WRONG_ANSWER",
	2:    "PRESENTATION_ERROR",
	3:    "QUERIES_LIMIT_EXCEEDED",
	4:    "INCORRECT_REQUEST",
	5:    "INSUFFICIENT_DATA",
	6:    "EXCESS_DATA",
	7:    "OUTPUT_LIMIT_EXCEEDED",
	8:    "TERMINATION_REAL_TIME_LIMIT_EXCEEDED",
	500:  "CUSTOM_FAILURE",
	999:  "FAIL_TEST",
	1000: "FAILED",
	2000: "SKIPPED",
}
var JudgeResult_Status_value = map[string]int32{
	"OK":                                   0,
	"WRONG_ANSWER":                         1,
	"PRESENTATION_ERROR":                   2,
	"QUERIES_LIMIT_EXCEEDED":               3,
	"INCORRECT_REQUEST":                    4,
	"INSUFFICIENT_DATA":                    5,
	"EXCESS_DATA":                          6,
	"OUTPUT_LIMIT_EXCEEDED":                7,
	"TERMINATION_REAL_TIME_LIMIT_EXCEEDED": 8,
	"CUSTOM_FAILURE":                       500,
	"FAIL_TEST":                            999,
	"FAILED":                               1000,
	"SKIPPED":                              2000,
}

func (x JudgeResult_Status) String() string {
	return proto.EnumName(JudgeResult_Status_name, int32(x))
}
func (JudgeResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

type Result struct {
	System    *bacs_problem.SystemResult `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Build     *bacs_process1.BuildResult `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
	TestGroup []*TestGroupResult         `protobuf:"bytes,3,rep,name=test_group,json=testGroup" json:"test_group,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Result) GetSystem() *bacs_problem.SystemResult {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Result) GetBuild() *bacs_process1.BuildResult {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *Result) GetTestGroup() []*TestGroupResult {
	if m != nil {
		return m.TestGroup
	}
	return nil
}

type TestGroupResult struct {
	Id       string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Executed bool          `protobuf:"varint,2,opt,name=executed" json:"executed,omitempty"`
	Test     []*TestResult `protobuf:"bytes,3,rep,name=test" json:"test,omitempty"`
	Score    int64         `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
}

func (m *TestGroupResult) Reset()                    { *m = TestGroupResult{} }
func (m *TestGroupResult) String() string            { return proto.CompactTextString(m) }
func (*TestGroupResult) ProtoMessage()               {}
func (*TestGroupResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TestGroupResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestGroupResult) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

func (m *TestGroupResult) GetTest() []*TestResult {
	if m != nil {
		return m.Test
	}
	return nil
}

func (m *TestGroupResult) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type TestResult struct {
	Id        string                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status    TestResult_Status              `protobuf:"varint,2,opt,name=status,enum=bacs.problem.single.TestResult_Status" json:"status,omitempty"`
	Execution *bacs_process1.ExecutionResult `protobuf:"bytes,3,opt,name=execution" json:"execution,omitempty"`
	Judge     *JudgeResult                   `protobuf:"bytes,4,opt,name=judge" json:"judge,omitempty"`
	File      []*FileResult                  `protobuf:"bytes,5,rep,name=file" json:"file,omitempty"`
}

func (m *TestResult) Reset()                    { *m = TestResult{} }
func (m *TestResult) String() string            { return proto.CompactTextString(m) }
func (*TestResult) ProtoMessage()               {}
func (*TestResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TestResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestResult) GetStatus() TestResult_Status {
	if m != nil {
		return m.Status
	}
	return TestResult_OK
}

func (m *TestResult) GetExecution() *bacs_process1.ExecutionResult {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *TestResult) GetJudge() *JudgeResult {
	if m != nil {
		return m.Judge
	}
	return nil
}

func (m *TestResult) GetFile() []*FileResult {
	if m != nil {
		return m.File
	}
	return nil
}

type JudgeResult struct {
	Status    JudgeResult_Status     `protobuf:"varint,1,opt,name=status,enum=bacs.problem.single.JudgeResult_Status" json:"status,omitempty"`
	Message   string                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Utilities *JudgeResult_Utilities `protobuf:"bytes,3,opt,name=utilities" json:"utilities,omitempty"`
}

func (m *JudgeResult) Reset()                    { *m = JudgeResult{} }
func (m *JudgeResult) String() string            { return proto.CompactTextString(m) }
func (*JudgeResult) ProtoMessage()               {}
func (*JudgeResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *JudgeResult) GetStatus() JudgeResult_Status {
	if m != nil {
		return m.Status
	}
	return JudgeResult_OK
}

func (m *JudgeResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *JudgeResult) GetUtilities() *JudgeResult_Utilities {
	if m != nil {
		return m.Utilities
	}
	return nil
}

type JudgeResult_Utility struct {
	Execution *bacs_process1.ExecutionResult `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
	Output    []byte                         `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *JudgeResult_Utility) Reset()                    { *m = JudgeResult_Utility{} }
func (m *JudgeResult_Utility) String() string            { return proto.CompactTextString(m) }
func (*JudgeResult_Utility) ProtoMessage()               {}
func (*JudgeResult_Utility) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

func (m *JudgeResult_Utility) GetExecution() *bacs_process1.ExecutionResult {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *JudgeResult_Utility) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type JudgeResult_AuxiliaryUtility struct {
	Name    string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Utility *JudgeResult_Utility `protobuf:"bytes,2,opt,name=utility" json:"utility,omitempty"`
}

func (m *JudgeResult_AuxiliaryUtility) Reset()                    { *m = JudgeResult_AuxiliaryUtility{} }
func (m *JudgeResult_AuxiliaryUtility) String() string            { return proto.CompactTextString(m) }
func (*JudgeResult_AuxiliaryUtility) ProtoMessage()               {}
func (*JudgeResult_AuxiliaryUtility) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 1} }

func (m *JudgeResult_AuxiliaryUtility) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JudgeResult_AuxiliaryUtility) GetUtility() *JudgeResult_Utility {
	if m != nil {
		return m.Utility
	}
	return nil
}

type JudgeResult_Utilities struct {
	Interactor *JudgeResult_Utility            `protobuf:"bytes,1,opt,name=interactor" json:"interactor,omitempty"`
	Checker    *JudgeResult_Utility            `protobuf:"bytes,2,opt,name=checker" json:"checker,omitempty"`
	Auxiliary  []*JudgeResult_AuxiliaryUtility `protobuf:"bytes,1000,rep,name=auxiliary" json:"auxiliary,omitempty"`
}

func (m *JudgeResult_Utilities) Reset()                    { *m = JudgeResult_Utilities{} }
func (m *JudgeResult_Utilities) String() string            { return proto.CompactTextString(m) }
func (*JudgeResult_Utilities) ProtoMessage()               {}
func (*JudgeResult_Utilities) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 2} }

func (m *JudgeResult_Utilities) GetInteractor() *JudgeResult_Utility {
	if m != nil {
		return m.Interactor
	}
	return nil
}

func (m *JudgeResult_Utilities) GetChecker() *JudgeResult_Utility {
	if m != nil {
		return m.Checker
	}
	return nil
}

func (m *JudgeResult_Utilities) GetAuxiliary() []*JudgeResult_AuxiliaryUtility {
	if m != nil {
		return m.Auxiliary
	}
	return nil
}

type FileResult struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FileResult) Reset()                    { *m = FileResult{} }
func (m *FileResult) String() string            { return proto.CompactTextString(m) }
func (*FileResult) ProtoMessage()               {}
func (*FileResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *FileResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FileResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "bacs.problem.single.Result")
	proto.RegisterType((*TestGroupResult)(nil), "bacs.problem.single.TestGroupResult")
	proto.RegisterType((*TestResult)(nil), "bacs.problem.single.TestResult")
	proto.RegisterType((*JudgeResult)(nil), "bacs.problem.single.JudgeResult")
	proto.RegisterType((*JudgeResult_Utility)(nil), "bacs.problem.single.JudgeResult.Utility")
	proto.RegisterType((*JudgeResult_AuxiliaryUtility)(nil), "bacs.problem.single.JudgeResult.AuxiliaryUtility")
	proto.RegisterType((*JudgeResult_Utilities)(nil), "bacs.problem.single.JudgeResult.Utilities")
	proto.RegisterType((*FileResult)(nil), "bacs.problem.single.FileResult")
	proto.RegisterEnum("bacs.problem.single.TestResult_Status", TestResult_Status_name, TestResult_Status_value)
	proto.RegisterEnum("bacs.problem.single.JudgeResult_Status", JudgeResult_Status_name, JudgeResult_Status_value)
}

func init() { proto.RegisterFile("bacs/problem/single/result.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x18, 0xc5, 0x4e, 0x62, 0xaf, 0xbf, 0xac, 0xb2, 0x66, 0x4a, 0x57, 0x8e, 0x11, 0x22, 0x8a, 0x2a,
	0x08, 0x5c, 0x38, 0x90, 0x4a, 0xdc, 0x20, 0x81, 0xb2, 0xc9, 0xa4, 0x35, 0xdd, 0xfc, 0x74, 0x6c,
	0xab, 0x88, 0x0b, 0x2c, 0xc7, 0x19, 0x82, 0x8b, 0x13, 0x47, 0xf6, 0x58, 0x6a, 0xde, 0x00, 0x5e,
	0x81, 0xb7, 0x80, 0x27, 0xe1, 0x2d, 0xa8, 0xc4, 0x2d, 0x0f, 0x80, 0x3c, 0xb6, 0xf3, 0xb7, 0xa5,
	0xe9, 0xde, 0x79, 0xe6, 0x9c, 0xf3, 0x7d, 0x67, 0xce, 0xcc, 0x97, 0x40, 0x6b, 0xee, 0xf9, 0x49,
	0x77, 0x13, 0x47, 0xf3, 0x90, 0xae, 0xba, 0x49, 0xb0, 0x5e, 0x86, 0xb4, 0x1b, 0xd3, 0x24, 0x0d,
	0x99, 0xb1, 0x89, 0x23, 0x16, 0xa1, 0x07, 0x19, 0xc3, 0x28, 0x18, 0x46, 0xce, 0xd0, 0x9b, 0x47,
	0xb2, 0x43, 0xbe, 0xfe, 0x61, 0x09, 0xf9, 0x34, 0x49, 0x32, 0x28, 0x4a, 0x63, 0x9f, 0x16, 0x60,
	0xf3, 0x08, 0x3c, 0x84, 0xda, 0x7f, 0x0a, 0x20, 0x11, 0x5e, 0x08, 0xf5, 0x40, 0x4a, 0xb6, 0x09,
	0xa3, 0x2b, 0x4d, 0x68, 0x09, 0x9d, 0x7a, 0x4f, 0x37, 0x8e, 0x3c, 0x58, 0x1c, 0xcb, 0xb9, 0xa4,
	0x60, 0xa2, 0x2e, 0xd4, 0xe6, 0x69, 0x10, 0x2e, 0x34, 0x91, 0x4b, 0x9a, 0x3b, 0x49, 0xd6, 0xc9,
	0xb8, 0xc9, 0xa0, 0x42, 0x91, 0xf3, 0xd0, 0x00, 0x80, 0xd1, 0x84, 0xb9, 0xcb, 0x38, 0x4a, 0x37,
	0x5a, 0xa5, 0x55, 0xe9, 0xd4, 0x7b, 0x8f, 0x8c, 0x37, 0x1c, 0xd6, 0xb0, 0x69, 0xc2, 0x9e, 0x64,
	0xac, 0xa2, 0x80, 0xc2, 0xca, 0x8d, 0xf6, 0xaf, 0x02, 0x5c, 0x9d, 0xc0, 0xa8, 0x01, 0x62, 0xb0,
	0xe0, 0xce, 0x15, 0x22, 0x06, 0x0b, 0xa4, 0xc3, 0x05, 0x7d, 0x45, 0xfd, 0x94, 0xd1, 0xdc, 0xdc,
	0x05, 0xd9, 0xad, 0xd1, 0x63, 0xa8, 0x66, 0xc5, 0x8a, 0xf6, 0x1f, 0xff, 0x6f, 0xfb, 0xa2, 0x33,
	0x27, 0xa3, 0x0f, 0xa0, 0x96, 0xf8, 0x51, 0x4c, 0xb5, 0x6a, 0x4b, 0xe8, 0x54, 0x48, 0xbe, 0x68,
	0xff, 0x21, 0x02, 0xec, 0xa9, 0x77, 0x5c, 0x7c, 0x03, 0x52, 0xc2, 0x3c, 0x96, 0x26, 0xdc, 0x43,
	0xa3, 0xf7, 0xc9, 0x99, 0x5e, 0x86, 0xc5, 0xd9, 0xa4, 0x50, 0xa1, 0xaf, 0x41, 0xc9, 0x5d, 0x07,
	0xd1, 0x5a, 0xab, 0xf0, 0x8c, 0x3f, 0x3a, 0xce, 0x18, 0x97, 0x70, 0x19, 0xd3, 0x8e, 0x8f, 0xbe,
	0x82, 0xda, 0xcb, 0x74, 0xb1, 0xcc, 0x1d, 0xd7, 0x7b, 0xad, 0x37, 0xf6, 0xfe, 0x2e, 0x63, 0x94,
	0x77, 0xc4, 0xe9, 0x59, 0x3c, 0x3f, 0x05, 0x21, 0xd5, 0x6a, 0x6f, 0x89, 0x67, 0x14, 0x84, 0xa5,
	0x8a, 0x93, 0xdb, 0x9f, 0x81, 0x94, 0x7b, 0x47, 0x12, 0x88, 0xd3, 0x67, 0xea, 0x7b, 0x08, 0x40,
	0x1a, 0xf5, 0xcd, 0x5b, 0x3c, 0x54, 0x05, 0x54, 0x07, 0xd9, 0x7a, 0x66, 0xce, 0x66, 0x78, 0xa8,
	0x8a, 0xed, 0xdf, 0x64, 0xa8, 0x1f, 0xb4, 0x45, 0xdf, 0xee, 0x42, 0x12, 0x78, 0x48, 0x9f, 0x9e,
	0x33, 0x7a, 0x9a, 0x92, 0x06, 0xf2, 0x8a, 0x26, 0x89, 0xb7, 0xa4, 0x3c, 0x66, 0x85, 0x94, 0x4b,
	0xf4, 0x14, 0x94, 0x94, 0x05, 0x61, 0xc0, 0x02, 0x9a, 0x14, 0xf9, 0x7d, 0x7e, 0xb6, 0xba, 0x53,
	0x2a, 0xc8, 0x5e, 0xac, 0xff, 0x08, 0x72, 0xbe, 0xbf, 0x3d, 0xbe, 0x14, 0xe1, 0x9e, 0x97, 0x72,
	0x0d, 0x52, 0x94, 0xb2, 0x4d, 0xca, 0xb8, 0xd5, 0x4b, 0x52, 0xac, 0xf4, 0x97, 0xa0, 0xf6, 0xd3,
	0x57, 0x41, 0x18, 0x78, 0xf1, 0xb6, 0x6c, 0x84, 0xa0, 0xba, 0xf6, 0x56, 0xb4, 0x78, 0x4f, 0xfc,
	0x1b, 0xdd, 0x80, 0x9c, 0x9b, 0xda, 0x16, 0x33, 0xd7, 0x79, 0xc7, 0xf3, 0x6c, 0x49, 0x29, 0xd4,
	0xff, 0x11, 0x40, 0xd9, 0x1d, 0x12, 0x3d, 0x05, 0x08, 0xd6, 0x8c, 0xc6, 0x9e, 0xcf, 0xa2, 0xb8,
	0x38, 0xcf, 0xbb, 0x17, 0x3d, 0xd0, 0x66, 0xde, 0xfc, 0x9f, 0xa9, 0xff, 0x0b, 0x8d, 0xef, 0xef,
	0xad, 0x10, 0xa2, 0x19, 0x28, 0x5e, 0x99, 0x83, 0xf6, 0x5a, 0xe6, 0x4f, 0xf0, 0xcb, 0xb3, 0x65,
	0x4e, 0xa3, 0x23, 0xfb, 0x22, 0xed, 0xdf, 0xc5, 0x3b, 0x4f, 0x53, 0x85, 0xcb, 0x17, 0x64, 0x3a,
	0x79, 0xe2, 0xf6, 0x27, 0xd6, 0x0b, 0x4c, 0x54, 0x01, 0x5d, 0x03, 0x9a, 0x11, 0x6c, 0xe1, 0x89,
	0xdd, 0xb7, 0xcd, 0xe9, 0xc4, 0xc5, 0x84, 0x4c, 0x89, 0x2a, 0x22, 0x1d, 0xae, 0x9f, 0x3b, 0x98,
	0x98, 0xd8, 0x72, 0x6f, 0xcd, 0xb1, 0x69, 0xbb, 0xf8, 0xfb, 0x01, 0xc6, 0x43, 0x3c, 0x54, 0x2b,
	0xe8, 0x21, 0xbc, 0x6f, 0x4e, 0x06, 0x53, 0x42, 0xf0, 0xc0, 0x76, 0x09, 0x7e, 0xee, 0x60, 0xcb,
	0x56, 0xab, 0xf9, 0xb6, 0xe5, 0x8c, 0x46, 0xe6, 0xc0, 0xc4, 0x13, 0xdb, 0x1d, 0xf6, 0xed, 0xbe,
	0x5a, 0x43, 0x57, 0x50, 0xcf, 0xb4, 0x96, 0x95, 0x6f, 0x48, 0xa8, 0x09, 0x0f, 0xa7, 0x8e, 0x3d,
	0x73, 0xec, 0xd3, 0xca, 0x32, 0xea, 0xc0, 0x23, 0x1b, 0x93, 0xb1, 0x39, 0xc9, 0xcd, 0x10, 0xdc,
	0xbf, 0x75, 0x6d, 0x73, 0x8c, 0x4f, 0x99, 0x17, 0xe8, 0x01, 0x34, 0x06, 0x8e, 0x65, 0x4f, 0xc7,
	0x6e, 0x36, 0x6b, 0x0e, 0xc1, 0xea, 0xbf, 0x15, 0xd4, 0x00, 0x25, 0x5b, 0xb9, 0x76, 0x66, 0xe8,
	0x6f, 0x19, 0xd5, 0x77, 0x93, 0xf8, 0x5a, 0x46, 0x97, 0xfb, 0x51, 0xfc, 0xeb, 0xaa, 0xfd, 0x05,
	0xc0, 0x7e, 0x94, 0xef, 0xfc, 0x7c, 0x21, 0xa8, 0x2e, 0x3c, 0xe6, 0x15, 0x4f, 0x95, 0x7f, 0xdf,
	0x5c, 0xfc, 0x20, 0xe5, 0x17, 0x30, 0x97, 0xf8, 0x5f, 0xc8, 0xe3, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0xbb, 0x11, 0x26, 0xce, 0x06, 0x00, 0x00,
}
