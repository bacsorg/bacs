// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/problem/single/testing.proto

package single

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestQuery_Wildcard_Flag int32

const (
	TestQuery_Wildcard_IGNORE_CASE TestQuery_Wildcard_Flag = 0
)

var TestQuery_Wildcard_Flag_name = map[int32]string{
	0: "IGNORE_CASE",
}
var TestQuery_Wildcard_Flag_value = map[string]int32{
	"IGNORE_CASE": 0,
}

func (x TestQuery_Wildcard_Flag) String() string {
	return proto.EnumName(TestQuery_Wildcard_Flag_name, int32(x))
}
func (TestQuery_Wildcard_Flag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0, 0}
}

type TestQuery_Regex_Flag int32

const (
	TestQuery_Regex_IGNORE_CASE TestQuery_Regex_Flag = 0
)

var TestQuery_Regex_Flag_name = map[int32]string{
	0: "IGNORE_CASE",
}
var TestQuery_Regex_Flag_value = map[string]int32{
	"IGNORE_CASE": 0,
}

func (x TestQuery_Regex_Flag) String() string {
	return proto.EnumName(TestQuery_Regex_Flag_name, int32(x))
}
func (TestQuery_Regex_Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 1, 0} }

type TestSequence_Order int32

const (
	TestSequence_IDENTITY        TestSequence_Order = 0
	TestSequence_NUMERIC         TestSequence_Order = 1
	TestSequence_LEXICOGRAPHICAL TestSequence_Order = 2
)

var TestSequence_Order_name = map[int32]string{
	0: "IDENTITY",
	1: "NUMERIC",
	2: "LEXICOGRAPHICAL",
}
var TestSequence_Order_value = map[string]int32{
	"IDENTITY":        0,
	"NUMERIC":         1,
	"LEXICOGRAPHICAL": 2,
}

func (x TestSequence_Order) String() string {
	return proto.EnumName(TestSequence_Order_name, int32(x))
}
func (TestSequence_Order) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

type TestSequence_ContinueCondition int32

const (
	TestSequence_ALWAYS   TestSequence_ContinueCondition = 0
	TestSequence_WHILE_OK TestSequence_ContinueCondition = 1
)

var TestSequence_ContinueCondition_name = map[int32]string{
	0: "ALWAYS",
	1: "WHILE_OK",
}
var TestSequence_ContinueCondition_value = map[string]int32{
	"ALWAYS":   0,
	"WHILE_OK": 1,
}

func (x TestSequence_ContinueCondition) String() string {
	return proto.EnumName(TestSequence_ContinueCondition_name, int32(x))
}
func (TestSequence_ContinueCondition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 1}
}

type TestQuery struct {
	// Types that are valid to be assigned to Query:
	//	*TestQuery_Id
	//	*TestQuery_Wildcard_
	//	*TestQuery_Regex_
	Query isTestQuery_Query `protobuf_oneof:"query"`
}

func (m *TestQuery) Reset()                    { *m = TestQuery{} }
func (m *TestQuery) String() string            { return proto.CompactTextString(m) }
func (*TestQuery) ProtoMessage()               {}
func (*TestQuery) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isTestQuery_Query interface {
	isTestQuery_Query()
}

type TestQuery_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type TestQuery_Wildcard_ struct {
	Wildcard *TestQuery_Wildcard `protobuf:"bytes,2,opt,name=wildcard,oneof"`
}
type TestQuery_Regex_ struct {
	Regex *TestQuery_Regex `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*TestQuery_Id) isTestQuery_Query()        {}
func (*TestQuery_Wildcard_) isTestQuery_Query() {}
func (*TestQuery_Regex_) isTestQuery_Query()    {}

func (m *TestQuery) GetQuery() isTestQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *TestQuery) GetId() string {
	if x, ok := m.GetQuery().(*TestQuery_Id); ok {
		return x.Id
	}
	return ""
}

func (m *TestQuery) GetWildcard() *TestQuery_Wildcard {
	if x, ok := m.GetQuery().(*TestQuery_Wildcard_); ok {
		return x.Wildcard
	}
	return nil
}

func (m *TestQuery) GetRegex() *TestQuery_Regex {
	if x, ok := m.GetQuery().(*TestQuery_Regex_); ok {
		return x.Regex
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestQuery) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestQuery_OneofMarshaler, _TestQuery_OneofUnmarshaler, _TestQuery_OneofSizer, []interface{}{
		(*TestQuery_Id)(nil),
		(*TestQuery_Wildcard_)(nil),
		(*TestQuery_Regex_)(nil),
	}
}

func _TestQuery_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestQuery)
	// query
	switch x := m.Query.(type) {
	case *TestQuery_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *TestQuery_Wildcard_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Wildcard); err != nil {
			return err
		}
	case *TestQuery_Regex_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Regex); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TestQuery.Query has unexpected type %T", x)
	}
	return nil
}

func _TestQuery_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestQuery)
	switch tag {
	case 1: // query.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Query = &TestQuery_Id{x}
		return true, err
	case 2: // query.wildcard
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TestQuery_Wildcard)
		err := b.DecodeMessage(msg)
		m.Query = &TestQuery_Wildcard_{msg}
		return true, err
	case 3: // query.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TestQuery_Regex)
		err := b.DecodeMessage(msg)
		m.Query = &TestQuery_Regex_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TestQuery_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestQuery)
	// query
	switch x := m.Query.(type) {
	case *TestQuery_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *TestQuery_Wildcard_:
		s := proto.Size(x.Wildcard)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TestQuery_Regex_:
		s := proto.Size(x.Regex)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TestQuery_Wildcard struct {
	Flag  []TestQuery_Wildcard_Flag `protobuf:"varint,1,rep,packed,name=flag,enum=bacs.problem.single.TestQuery_Wildcard_Flag" json:"flag,omitempty"`
	Value string                    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *TestQuery_Wildcard) Reset()                    { *m = TestQuery_Wildcard{} }
func (m *TestQuery_Wildcard) String() string            { return proto.CompactTextString(m) }
func (*TestQuery_Wildcard) ProtoMessage()               {}
func (*TestQuery_Wildcard) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 0} }

func (m *TestQuery_Wildcard) GetFlag() []TestQuery_Wildcard_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *TestQuery_Wildcard) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TestQuery_Regex struct {
	Flag  []TestQuery_Regex_Flag `protobuf:"varint,1,rep,packed,name=flag,enum=bacs.problem.single.TestQuery_Regex_Flag" json:"flag,omitempty"`
	Value string                 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *TestQuery_Regex) Reset()                    { *m = TestQuery_Regex{} }
func (m *TestQuery_Regex) String() string            { return proto.CompactTextString(m) }
func (*TestQuery_Regex) ProtoMessage()               {}
func (*TestQuery_Regex) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0, 1} }

func (m *TestQuery_Regex) GetFlag() []TestQuery_Regex_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *TestQuery_Regex) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TestSequence struct {
	Query             []*TestQuery                   `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
	Order             TestSequence_Order             `protobuf:"varint,2,opt,name=order,enum=bacs.problem.single.TestSequence_Order" json:"order,omitempty"`
	ContinueCondition TestSequence_ContinueCondition `protobuf:"varint,3,opt,name=continue_condition,json=continueCondition,enum=bacs.problem.single.TestSequence_ContinueCondition" json:"continue_condition,omitempty"`
}

func (m *TestSequence) Reset()                    { *m = TestSequence{} }
func (m *TestSequence) String() string            { return proto.CompactTextString(m) }
func (*TestSequence) ProtoMessage()               {}
func (*TestSequence) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *TestSequence) GetQuery() []*TestQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *TestSequence) GetOrder() TestSequence_Order {
	if m != nil {
		return m.Order
	}
	return TestSequence_IDENTITY
}

func (m *TestSequence) GetContinueCondition() TestSequence_ContinueCondition {
	if m != nil {
		return m.ContinueCondition
	}
	return TestSequence_ALWAYS
}

func init() {
	proto.RegisterType((*TestQuery)(nil), "bacs.problem.single.TestQuery")
	proto.RegisterType((*TestQuery_Wildcard)(nil), "bacs.problem.single.TestQuery.Wildcard")
	proto.RegisterType((*TestQuery_Regex)(nil), "bacs.problem.single.TestQuery.Regex")
	proto.RegisterType((*TestSequence)(nil), "bacs.problem.single.TestSequence")
	proto.RegisterEnum("bacs.problem.single.TestQuery_Wildcard_Flag", TestQuery_Wildcard_Flag_name, TestQuery_Wildcard_Flag_value)
	proto.RegisterEnum("bacs.problem.single.TestQuery_Regex_Flag", TestQuery_Regex_Flag_name, TestQuery_Regex_Flag_value)
	proto.RegisterEnum("bacs.problem.single.TestSequence_Order", TestSequence_Order_name, TestSequence_Order_value)
	proto.RegisterEnum("bacs.problem.single.TestSequence_ContinueCondition", TestSequence_ContinueCondition_name, TestSequence_ContinueCondition_value)
}

func init() { proto.RegisterFile("bacs/problem/single/testing.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5d, 0x6b, 0xd3, 0x50,
	0x1c, 0xc6, 0x93, 0x74, 0xe9, 0xda, 0x7f, 0x47, 0x97, 0xfd, 0x27, 0x58, 0x76, 0x21, 0x35, 0x08,
	0x56, 0xd0, 0x53, 0xe8, 0x04, 0x6f, 0x1c, 0x98, 0xc5, 0xb8, 0x04, 0x63, 0xa3, 0xa7, 0x95, 0x3a,
	0x6f, 0x4a, 0x5e, 0x8e, 0xe1, 0x40, 0x4c, 0xb6, 0xbc, 0xf8, 0x82, 0x1f, 0xc6, 0x8f, 0xe4, 0x57,
	0x92, 0x9c, 0xa4, 0x03, 0x5f, 0xd8, 0xca, 0x2e, 0x93, 0xfc, 0x9e, 0xdf, 0xf3, 0x1c, 0x0e, 0x81,
	0xfb, 0x81, 0x1f, 0x16, 0xd3, 0x8b, 0x3c, 0x0b, 0x12, 0xf6, 0x79, 0x5a, 0xf0, 0x34, 0x4e, 0xd8,
	0xb4, 0x64, 0x45, 0xc9, 0xd3, 0x98, 0x5c, 0xe4, 0x59, 0x99, 0xe1, 0x61, 0x8d, 0x90, 0x16, 0x21,
	0x0d, 0xa2, 0xff, 0xec, 0x40, 0x7f, 0xc9, 0x8a, 0xf2, 0x5d, 0xc5, 0xf2, 0xef, 0xa8, 0x81, 0xc2,
	0xa3, 0x91, 0x3c, 0x96, 0x27, 0x7d, 0x5b, 0xa2, 0x0a, 0x8f, 0xd0, 0x82, 0xde, 0x57, 0x9e, 0x44,
	0xa1, 0x9f, 0x47, 0x23, 0x65, 0x2c, 0x4f, 0x06, 0xb3, 0x87, 0xe4, 0x3f, 0x1e, 0x72, 0xe5, 0x20,
	0xab, 0x16, 0xb7, 0x25, 0x7a, 0x15, 0xc5, 0xe7, 0xa0, 0xe6, 0x2c, 0x66, 0xdf, 0x46, 0x1d, 0xe1,
	0x78, 0x70, 0x83, 0x83, 0xd6, 0xac, 0x2d, 0xd1, 0x26, 0x74, 0xf4, 0x03, 0x7a, 0x1b, 0x2b, 0xbe,
	0x80, 0x9d, 0x4f, 0x89, 0x1f, 0x8f, 0xe4, 0x71, 0x67, 0x32, 0x9c, 0x3d, 0xde, 0x72, 0x0c, 0x79,
	0x95, 0xf8, 0x31, 0x15, 0x49, 0xbc, 0x03, 0xea, 0x17, 0x3f, 0xa9, 0x98, 0x38, 0x4f, 0x9f, 0x36,
	0x0f, 0xfa, 0x5d, 0xd8, 0xa9, 0x19, 0xdc, 0x87, 0x81, 0x73, 0x36, 0xf7, 0xa8, 0xb5, 0x36, 0x8d,
	0x85, 0xa5, 0x49, 0x47, 0x15, 0xa8, 0x62, 0x0e, 0x9e, 0xfc, 0xd1, 0xfc, 0x68, 0x9b, 0x23, 0xdc,
	0xbe, 0xf6, 0x74, 0x17, 0xd4, 0xcb, 0x5a, 0xa4, 0xff, 0x52, 0x60, 0xaf, 0xd6, 0x2e, 0xd8, 0x65,
	0xc5, 0xd2, 0x90, 0xe1, 0xd3, 0xf6, 0x8b, 0x18, 0x32, 0x98, 0xdd, 0xbb, 0x7e, 0x08, 0x6d, 0x60,
	0x3c, 0x01, 0x35, 0xcb, 0x23, 0x96, 0x8b, 0xfa, 0xe1, 0x35, 0xb7, 0xb8, 0xe9, 0x21, 0x5e, 0x8d,
	0xd3, 0x26, 0x85, 0x01, 0x60, 0x98, 0xa5, 0x25, 0x4f, 0x2b, 0xb6, 0x0e, 0xb3, 0x34, 0xe2, 0x25,
	0xcf, 0x52, 0x71, 0x9b, 0xc3, 0xd9, 0xf1, 0xcd, 0x2e, 0xb3, 0xcd, 0x9a, 0x9b, 0x28, 0x3d, 0x08,
	0xff, 0x7e, 0xa5, 0x3f, 0x03, 0x55, 0x74, 0xe2, 0x1e, 0xf4, 0x9c, 0x97, 0xd6, 0x7c, 0xe9, 0x2c,
	0xcf, 0x35, 0x09, 0x07, 0xb0, 0x3b, 0x7f, 0xff, 0xc6, 0xa2, 0x8e, 0xa9, 0xc9, 0x78, 0x08, 0xfb,
	0xae, 0xf5, 0xc1, 0x31, 0xbd, 0x33, 0x6a, 0xbc, 0xb5, 0x1d, 0xd3, 0x70, 0x35, 0x45, 0x7f, 0x02,
	0x07, 0xff, 0x14, 0x20, 0x40, 0xd7, 0x70, 0x57, 0xc6, 0xf9, 0x42, 0x93, 0x6a, 0xe1, 0xca, 0x76,
	0x5c, 0x6b, 0xed, 0xbd, 0xd6, 0xe4, 0xd3, 0xde, 0xc7, 0x6e, 0xb3, 0x31, 0xe8, 0x8a, 0x3f, 0xe3,
	0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x35, 0x77, 0xaf, 0x3e, 0x03, 0x00, 0x00,
}
