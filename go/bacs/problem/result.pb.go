// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bacs/problem/result.proto

package problem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SystemResult_Status int32

const (
	SystemResult_OK               SystemResult_Status = 0
	SystemResult_INVALID_REVISION SystemResult_Status = 1
)

var SystemResult_Status_name = map[int32]string{
	0: "OK",
	1: "INVALID_REVISION",
}
var SystemResult_Status_value = map[string]int32{
	"OK":               0,
	"INVALID_REVISION": 1,
}

func (x SystemResult_Status) String() string {
	return proto.EnumName(SystemResult_Status_name, int32(x))
}
func (SystemResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type SystemResult struct {
	Status SystemResult_Status `protobuf:"varint,1,opt,name=status,enum=bacs.problem.SystemResult_Status" json:"status,omitempty"`
}

func (m *SystemResult) Reset()                    { *m = SystemResult{} }
func (m *SystemResult) String() string            { return proto.CompactTextString(m) }
func (*SystemResult) ProtoMessage()               {}
func (*SystemResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SystemResult) GetStatus() SystemResult_Status {
	if m != nil {
		return m.Status
	}
	return SystemResult_OK
}

func init() {
	proto.RegisterType((*SystemResult)(nil), "bacs.problem.SystemResult")
	proto.RegisterEnum("bacs.problem.SystemResult_Status", SystemResult_Status_name, SystemResult_Status_value)
}

func init() { proto.RegisterFile("bacs/problem/result.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x4a, 0x4c, 0x2e,
	0xd6, 0x2f, 0x28, 0xca, 0x4f, 0xca, 0x49, 0xcd, 0xd5, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x49, 0xe9, 0x41, 0xa5, 0x94, 0x0a, 0xb9, 0x78,
	0x82, 0x2b, 0x8b, 0x4b, 0x52, 0x73, 0x83, 0xc0, 0x6a, 0x84, 0x2c, 0xb9, 0xd8, 0x8a, 0x4b, 0x12,
	0x4b, 0x4a, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x14, 0xf5, 0x90, 0x95, 0xeb, 0x21,
	0xab, 0xd5, 0x0b, 0x06, 0x2b, 0x0c, 0x82, 0x6a, 0x50, 0x52, 0xe3, 0x62, 0x83, 0x88, 0x08, 0xb1,
	0x71, 0x31, 0xf9, 0x7b, 0x0b, 0x30, 0x08, 0x89, 0x70, 0x09, 0x78, 0xfa, 0x85, 0x39, 0xfa, 0x78,
	0xba, 0xc4, 0x07, 0xb9, 0x86, 0x79, 0x06, 0x7b, 0xfa, 0xfb, 0x09, 0x30, 0x3a, 0x71, 0x46, 0xb1,
	0x43, 0x8d, 0x4b, 0x62, 0x03, 0x3b, 0xc9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x77, 0x64, 0x08,
	0xa1, 0xaf, 0x00, 0x00, 0x00,
}
