// Code generated by protoc-gen-go.
// source: bacs/external/external.proto
// DO NOT EDIT!

package external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/bacsorg/protobuf/google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Judge service

type JudgeClient interface {
	GetAllContestIds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Contest_IdList, error)
	GetAllContests(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ContestList, error)
	GetContest(ctx context.Context, in *Contest_Id, opts ...grpc.CallOption) (*Contest, error)
	GetProblem(ctx context.Context, in *Problem_Id, opts ...grpc.CallOption) (*Problem, error)
	GetAllLanguages(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*LanguageList, error)
	GetStatementUrl(ctx context.Context, in *Problem_Statement_Request, opts ...grpc.CallOption) (*Problem_Statement_Url, error)
	Send(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*SubmitResult_Id, error)
	SendAll(ctx context.Context, in *SubmitList, opts ...grpc.CallOption) (*SubmitResult_IdList, error)
	// revision is not used
	Rejudge(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult_Id, error)
	RejudgeAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResult_IdList, error)
	FetchResult(ctx context.Context, in *SubmitResult_Id, opts ...grpc.CallOption) (*SubmitResult, error)
	FetchResultAll(ctx context.Context, in *SubmitResult_IdList, opts ...grpc.CallOption) (*SubmitResultList, error)
	FetchLatestResult(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult, error)
	FetchLatestResultAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResultList, error)
	GetResultRevisions(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult_MultipleId, error)
	GetResultRevisionsAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResult_MultipleIdList, error)
}

type judgeClient struct {
	cc *grpc.ClientConn
}

func NewJudgeClient(cc *grpc.ClientConn) JudgeClient {
	return &judgeClient{cc}
}

func (c *judgeClient) GetAllContestIds(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Contest_IdList, error) {
	out := new(Contest_IdList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetAllContestIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetAllContests(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ContestList, error) {
	out := new(ContestList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetAllContests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetContest(ctx context.Context, in *Contest_Id, opts ...grpc.CallOption) (*Contest, error) {
	out := new(Contest)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetContest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetProblem(ctx context.Context, in *Problem_Id, opts ...grpc.CallOption) (*Problem, error) {
	out := new(Problem)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetProblem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetAllLanguages(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*LanguageList, error) {
	out := new(LanguageList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetAllLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetStatementUrl(ctx context.Context, in *Problem_Statement_Request, opts ...grpc.CallOption) (*Problem_Statement_Url, error) {
	out := new(Problem_Statement_Url)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetStatementUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) Send(ctx context.Context, in *Submit, opts ...grpc.CallOption) (*SubmitResult_Id, error) {
	out := new(SubmitResult_Id)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) SendAll(ctx context.Context, in *SubmitList, opts ...grpc.CallOption) (*SubmitResult_IdList, error) {
	out := new(SubmitResult_IdList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/SendAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) Rejudge(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult_Id, error) {
	out := new(SubmitResult_Id)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/Rejudge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) RejudgeAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResult_IdList, error) {
	out := new(SubmitResult_IdList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/RejudgeAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) FetchResult(ctx context.Context, in *SubmitResult_Id, opts ...grpc.CallOption) (*SubmitResult, error) {
	out := new(SubmitResult)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/FetchResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) FetchResultAll(ctx context.Context, in *SubmitResult_IdList, opts ...grpc.CallOption) (*SubmitResultList, error) {
	out := new(SubmitResultList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/FetchResultAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) FetchLatestResult(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult, error) {
	out := new(SubmitResult)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/FetchLatestResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) FetchLatestResultAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResultList, error) {
	out := new(SubmitResultList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/FetchLatestResultAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetResultRevisions(ctx context.Context, in *Submit_Id, opts ...grpc.CallOption) (*SubmitResult_MultipleId, error) {
	out := new(SubmitResult_MultipleId)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetResultRevisions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetResultRevisionsAll(ctx context.Context, in *Submit_IdList, opts ...grpc.CallOption) (*SubmitResult_MultipleIdList, error) {
	out := new(SubmitResult_MultipleIdList)
	err := grpc.Invoke(ctx, "/bacs.external.Judge/GetResultRevisionsAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Judge service

type JudgeServer interface {
	GetAllContestIds(context.Context, *google_protobuf.Empty) (*Contest_IdList, error)
	GetAllContests(context.Context, *google_protobuf.Empty) (*ContestList, error)
	GetContest(context.Context, *Contest_Id) (*Contest, error)
	GetProblem(context.Context, *Problem_Id) (*Problem, error)
	GetAllLanguages(context.Context, *google_protobuf.Empty) (*LanguageList, error)
	GetStatementUrl(context.Context, *Problem_Statement_Request) (*Problem_Statement_Url, error)
	Send(context.Context, *Submit) (*SubmitResult_Id, error)
	SendAll(context.Context, *SubmitList) (*SubmitResult_IdList, error)
	// revision is not used
	Rejudge(context.Context, *Submit_Id) (*SubmitResult_Id, error)
	RejudgeAll(context.Context, *Submit_IdList) (*SubmitResult_IdList, error)
	FetchResult(context.Context, *SubmitResult_Id) (*SubmitResult, error)
	FetchResultAll(context.Context, *SubmitResult_IdList) (*SubmitResultList, error)
	FetchLatestResult(context.Context, *Submit_Id) (*SubmitResult, error)
	FetchLatestResultAll(context.Context, *Submit_IdList) (*SubmitResultList, error)
	GetResultRevisions(context.Context, *Submit_Id) (*SubmitResult_MultipleId, error)
	GetResultRevisionsAll(context.Context, *Submit_IdList) (*SubmitResult_MultipleIdList, error)
}

func RegisterJudgeServer(s *grpc.Server, srv JudgeServer) {
	s.RegisterService(&_Judge_serviceDesc, srv)
}

func _Judge_GetAllContestIds_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetAllContestIds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetAllContests_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetAllContests(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetContest_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Contest_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetContest(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetProblem_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Problem_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetProblem(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetAllLanguages_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetAllLanguages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetStatementUrl_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Problem_Statement_Request)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetStatementUrl(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_Send_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_SendAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SubmitList)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).SendAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_Rejudge_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).Rejudge(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_RejudgeAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_IdList)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).RejudgeAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_FetchResult_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SubmitResult_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).FetchResult(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_FetchResultAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SubmitResult_IdList)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).FetchResultAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_FetchLatestResult_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).FetchLatestResult(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_FetchLatestResultAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_IdList)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).FetchLatestResultAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetResultRevisions_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_Id)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetResultRevisions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Judge_GetResultRevisionsAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Submit_IdList)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(JudgeServer).GetResultRevisionsAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Judge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bacs.external.Judge",
	HandlerType: (*JudgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllContestIds",
			Handler:    _Judge_GetAllContestIds_Handler,
		},
		{
			MethodName: "GetAllContests",
			Handler:    _Judge_GetAllContests_Handler,
		},
		{
			MethodName: "GetContest",
			Handler:    _Judge_GetContest_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _Judge_GetProblem_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _Judge_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetStatementUrl",
			Handler:    _Judge_GetStatementUrl_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Judge_Send_Handler,
		},
		{
			MethodName: "SendAll",
			Handler:    _Judge_SendAll_Handler,
		},
		{
			MethodName: "Rejudge",
			Handler:    _Judge_Rejudge_Handler,
		},
		{
			MethodName: "RejudgeAll",
			Handler:    _Judge_RejudgeAll_Handler,
		},
		{
			MethodName: "FetchResult",
			Handler:    _Judge_FetchResult_Handler,
		},
		{
			MethodName: "FetchResultAll",
			Handler:    _Judge_FetchResultAll_Handler,
		},
		{
			MethodName: "FetchLatestResult",
			Handler:    _Judge_FetchLatestResult_Handler,
		},
		{
			MethodName: "FetchLatestResultAll",
			Handler:    _Judge_FetchLatestResultAll_Handler,
		},
		{
			MethodName: "GetResultRevisions",
			Handler:    _Judge_GetResultRevisions_Handler,
		},
		{
			MethodName: "GetResultRevisionsAll",
			Handler:    _Judge_GetResultRevisionsAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
