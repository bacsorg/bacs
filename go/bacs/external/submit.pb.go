// Code generated by protoc-gen-go.
// source: bacs/external/submit.proto
// DO NOT EDIT!

package bacs_external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Submit struct {
	Id      *Submit_Id     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Author  *Submit_Author `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Problem *Problem_Id    `protobuf:"bytes,3,opt,name=problem" json:"problem,omitempty"`
	Source  *Submit_Source `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *Submit) Reset()         { *m = Submit{} }
func (m *Submit) String() string { return proto.CompactTextString(m) }
func (*Submit) ProtoMessage()    {}

func (m *Submit) GetId() *Submit_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Submit) GetAuthor() *Submit_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Submit) GetProblem() *Problem_Id {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *Submit) GetSource() *Submit_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Submit_Id struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Submit_Id) Reset()         { *m = Submit_Id{} }
func (m *Submit_Id) String() string { return proto.CompactTextString(m) }
func (*Submit_Id) ProtoMessage()    {}

type Submit_IdList struct {
	Entry []*Submit_Id `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *Submit_IdList) Reset()         { *m = Submit_IdList{} }
func (m *Submit_IdList) String() string { return proto.CompactTextString(m) }
func (*Submit_IdList) ProtoMessage()    {}

func (m *Submit_IdList) GetEntry() []*Submit_Id {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Submit_Author struct {
	// Types that are valid to be assigned to Author:
	//	*Submit_Author_UserLogin
	Author isSubmit_Author_Author `protobuf_oneof:"author"`
}

func (m *Submit_Author) Reset()         { *m = Submit_Author{} }
func (m *Submit_Author) String() string { return proto.CompactTextString(m) }
func (*Submit_Author) ProtoMessage()    {}

type isSubmit_Author_Author interface {
	isSubmit_Author_Author()
}

type Submit_Author_UserLogin struct {
	UserLogin string `protobuf:"bytes,1,opt,name=user_login,oneof"`
}

func (*Submit_Author_UserLogin) isSubmit_Author_Author() {}

func (m *Submit_Author) GetAuthor() isSubmit_Author_Author {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Submit_Author) GetUserLogin() string {
	if x, ok := m.GetAuthor().(*Submit_Author_UserLogin); ok {
		return x.UserLogin
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Submit_Author) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Submit_Author_OneofMarshaler, _Submit_Author_OneofUnmarshaler, []interface{}{
		(*Submit_Author_UserLogin)(nil),
	}
}

func _Submit_Author_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Submit_Author)
	// author
	switch x := m.Author.(type) {
	case *Submit_Author_UserLogin:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.UserLogin)
	case nil:
	default:
		return fmt.Errorf("Submit_Author.Author has unexpected type %T", x)
	}
	return nil
}

func _Submit_Author_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Submit_Author)
	switch tag {
	case 1: // author.user_login
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Author = &Submit_Author_UserLogin{x}
		return true, err
	default:
		return false, nil
	}
}

type Submit_Source struct {
	Data     []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Language *Language_Id `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *Submit_Source) Reset()         { *m = Submit_Source{} }
func (m *Submit_Source) String() string { return proto.CompactTextString(m) }
func (*Submit_Source) ProtoMessage()    {}

func (m *Submit_Source) GetLanguage() *Language_Id {
	if m != nil {
		return m.Language
	}
	return nil
}

type SubmitList struct {
	Entry []*Submit `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *SubmitList) Reset()         { *m = SubmitList{} }
func (m *SubmitList) String() string { return proto.CompactTextString(m) }
func (*SubmitList) ProtoMessage()    {}

func (m *SubmitList) GetEntry() []*Submit {
	if m != nil {
		return m.Entry
	}
	return nil
}
